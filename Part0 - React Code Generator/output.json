[
  {
    "elementType": "ALERT",
    "code": "import React, { forwardRef } from \"react\";\nimport DOMPurify from \"dompurify\";\nimport { Alert, AlertProps, AlertTitle } from \"@mui/material\";\n\nexport type KdAlertProps = AlertProps;\n\nconst KdAlert = forwardRef<HTMLDivElement, KdAlertProps>(function KdAlert(\n  props: KdAlertProps,\n  ref\n) {\n  const color = {\n    success: \"bg-light-success\",\n    info: \"bg-light-info\",\n    warning: \"bg-light-warning\",\n    error: \"bg-light-danger\",\n  }[props.severity ?? \"info\"];\n\n  const className = props.className ?? \"d-flex align-items-center mb-50\";\n\n  const cleanValueTitle = DOMPurify.sanitize(props.title ?? \"\", {\n    USE_PROFILES: { html: true },\n  });\n  const cleanValueChildren = DOMPurify.sanitize(\n    (props.children as string) ?? \"\",\n    {\n      USE_PROFILES: { html: true },\n    }\n  );\n\n  return (\n    <Alert\n      ref={ref}\n      severity={props.severity}\n      className={`${className} ${color}`}\n    >\n      {props.title && (\n        <AlertTitle>\n          <div\n            dangerouslySetInnerHTML={{\n              __html: cleanValueTitle,\n            }}\n          />\n        </AlertTitle>\n      )}\n      <div\n        dangerouslySetInnerHTML={{\n          __html: cleanValueChildren,\n        }}\n      />\n    </Alert>\n  );\n});\n\nexport default KdAlert;\n",
    "meta": "{\n  elementType: \"KdAlert\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {\n    children: { type: \"static\", content: \"مقدار\" },\n    title: { type: \"static\", content: \"توجه\" },\n    severity: { type: \"static\", content: \"success\" },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "BUTTON",
    "code": "import React from \"react\";\nimport Button, { ButtonProps } from \"@mui/material/Button\";\nimport { KdpaTooltip } from \"../../Tooltips\";\nimport { CircularProgress } from \"@mui/material\";\n\n// import \"./kdpaPrimaryButton.scss\";\n\nexport interface KdpaPrimaryButtonProps extends ButtonProps {\n  children?: React.ReactNode;\n  icon?: JSX.Element;\n  tooltipText?: string;\n  loading?: boolean;\n  onClick?: () => void;\n  [x: string]: any;\n}\n\nfunction KdpaPrimaryButton({\n  children,\n  icon,\n  tooltipText,\n  onClick,\n  loading,\n  disabled,\n  ...props\n}: KdpaPrimaryButtonProps) {\n  const ButtonContent = (\n    <Button\n      onClick={onClick}\n      variant=\"contained\"\n      sx={{ minWidth: \"36px\" }}\n      startIcon={icon}\n      {...props}\n      disabled={loading || disabled}\n    >\n      {loading ? (\n        <CircularProgress\n          color=\"inherit\"\n          size={18}\n          sx={{ marginY: \"4px\", marginX: \"12px\" }}\n        />\n      ) : (\n        children\n      )}\n    </Button>\n  );\n\n  return tooltipText ? (\n    <KdpaTooltip title={tooltipText}>{ButtonContent}</KdpaTooltip>\n  ) : (\n    ButtonContent\n  );\n}\n\nexport default KdpaPrimaryButton;\n",
    "meta": "{\n  elementType: \"KdpaPrimaryButton\",\n  children: [],\n  parentId: \"\",\n  style: {\n    minWidth: { type: \"static\", content: \"80px\" },\n    // minHeight: { type: \"static\", content: \"50px\" },\n    borderRadius: { type: \"static\", content: \"8px\" },\n    fontSize: { type: \"static\", content: \"14px\" },\n    // fontWeight: { type: \"static\", content: \"600\" },\n    display: { type: \"static\", content: \"flex\" },\n    flexDirection: { type: \"static\", content: \"row\" },\n    gap: { type: \"static\", content: \"10px\" },\n  },\n  attrs: {},\n  innerChildren: [{ type: \"static\", content: \"button\" }],\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "CAPTCHA",
    "code": "import React from \"react\";\nimport { captchaPath } from \"../../utils/sharedUtils\";\n\nimport { styled } from \"@mui/system\";\n\nconst StyledImage = styled(\"img\")();\n\nexport type KdCaptchaProps = {\n  pathProp: {\n    APIURL: string;\n  };\n  randomNumber: number;\n};\n\nconst KdCaptcha: React.FC<KdCaptchaProps> = ({\n  pathProp,\n  randomNumber,\n  ...props\n}) => {\n  return (\n    <StyledImage\n      {...props}\n      alt=\"CAPTCHA\"\n      src={`${pathProp.APIURL}${captchaPath}${randomNumber}`}\n    />\n  );\n};\n\nexport default KdCaptcha;\n",
    "meta": "{\n  elementType: \"KdCaptcha\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {},\n  selfClosing: true,\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "CARD_ELEMENT",
    "code": "import React from \"react\";\nimport Grid, { GridProps } from \"@mui/material/Grid\";\nexport type KdpaGridProps = GridProps;\n\nfunction KdpaGrid({ children, ...props }: KdpaGridProps) {\n  return <Grid {...props}>{children}</Grid>;\n}\n\nexport default KdpaGrid;\n",
    "meta": "{\n  elementType: \"KdpaGrid\",\n  children: [],\n  parentId: \"\",\n  style: {\n    padding: { type: \"static\", content: \"6px\" },\n  },\n  attrs: {},\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "CHECK_BOX",
    "code": "import React from \"react\";\nimport Checkbox, { CheckboxProps } from \"@mui/material/Checkbox\";\n\nexport type KdpaCheckBoxProps = CheckboxProps;\n\nconst KdpaCheckBox = React.forwardRef<HTMLInputElement, KdpaCheckBoxProps>(\n  (props, ref) => {\n    return <Checkbox {...props} className={props.className} inputRef={ref} />;\n  }\n);\n\nexport default KdpaCheckBox;\n",
    "meta": "{\n  elementType: \"KdFormField\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  selfClosing: true,\n  attrs: {\n    defaultChecked: { type: \"static\", content: true },\n    label: { type: \"static\", content: \"label\" },\n    Component: {\n      type: \"functionalElement\",\n      content: {\n        type: \"element\",\n        content: {\n          elementType: \"KdpaFormControlLabel\",\n          children: [],\n          parentId: \"\",\n          style: {},\n          attrs: {\n            control: {\n              type: \"element\",\n              content: {\n                elementType: \"KdpaCheckBox\",\n                children: [],\n                parentId: \"\",\n                style: {},\n                attrs: {},\n                selfClosing: true,\n                dependency: {\n                  type: \"package\",\n                  version: \"latest\",\n                  path: \"kdpa-components\",\n                  meta: {\n                    namedImport: true,\n                  },\n                },\n              },\n            },\n            checked: {\n              type: \"codeBlock\",\n              code: \"$args[0]?.value\",\n            },\n            \"$args[0]\": {\n              type: \"spread\",\n            },\n          },\n          selfClosing: true,\n          dependency: {\n            type: \"package\",\n            version: \"latest\",\n            path: \"kdpa-components\",\n            meta: {\n              namedImport: true,\n            },\n          },\n        },\n      },\n    },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "COLUMN_CHART",
    "code": "import { GenerateDataChart3D } from \"./KdChart3DHelper\";\nimport KdChart, { KdChartProps } from \"../KdChart/KdChart\";\n\nexport type KdChart3DProps = KdChartProps & {\n  data?: { [key: string]: unknown }[];\n  groupBy?: string;\n  seriesBy?: string;\n  valueBy?: string;\n};\n\nconst KdChart3D = ({\n  data = [],\n  groupBy = \"\",\n  seriesBy = \"\",\n  valueBy = \"\",\n  ...props\n}: KdChart3DProps) => {\n  const { series, uniqueCategoryArray } = GenerateDataChart3D(\n    data,\n    groupBy,\n    seriesBy,\n    valueBy\n  );\n  return (\n    <KdChart\n      noDataText={data.length === 0 ? \"بدون داده\" : \"داده های شما سازگار نیست\"}\n      labels={(uniqueCategoryArray as string[]) ?? []}\n      series={series}\n      {...props}\n    />\n  );\n};\n\nexport default KdChart3D;\n",
    "meta": "{\n  elementType: \"KdChart3D\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {\n    type: { type: \"static\", content: \"bar\" },\n  },\n  selfClosing: true,\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: { namedImport: true },\n  },\n}"
  },
  {
    "elementType": "DATA_GRID",
    "code": "import { useContext } from \"react\";\nimport DataTable from \"react-data-table-component\";\nimport { KdpaCheckBox, KdpaPaginationGrid } from \"kdpa-components\";\n\nimport {\n  propertyExtractor,\n  stylesExtractor,\n} from \"@/core/utils/kdlValueExtractor\";\nimport { EditorElements } from \"@/components/elements\";\nimport { useEditorStore } from \"@/core/store/editorStore\";\nimport { DarkModeContext } from \"@/context/DarkModeProvider\";\nimport ElementWrapper from \"@/core/components/Element/ElementWrapper\";\nimport { customStyleKeyGenerator } from \"@/components/layouts/designer/RightSideBar/tabs/StyleTab/components/EditorCss/utils\";\n\nfunction Element({ style, ...props }: any) {\n  const nodes = useEditorStore((store) => store.nodes);\n  const getNodeById = useEditorStore((store) => store.getNodeById);\n  const colNodeIds = getNodeById(props.id).node.children;\n\n  const newColumns =\n    colNodeIds\n      ?.map((colNodeId) => {\n        const colNode = getNodeById(colNodeId);\n        const colStyles = stylesExtractor(colNode.node?.style);\n        const colAttrs = propertyExtractor(colNode.node?.attrs);\n\n        if (colNode.node.children && colNode.node.children?.length > 0) {\n          const celNodesId = colNode.node.children;\n\n          return {\n            id: colNodeId,\n            name: (\n              <ElementWrapper\n                id={colNodeId}\n                hoverdIcon={false}\n                className=\"truncate\"\n                title={colAttrs?.label ?? \"\"}\n              >\n                {colAttrs?.label ?? \"\"}\n              </ElementWrapper>\n            ),\n            cell(_: any, rowIndex: any) {\n              if (colAttrs.name === \"ردیف\") return rowIndex + 1;\n              else {\n                return (\n                  <>\n                    {celNodesId.map((cellNode) => {\n                      const Component =\n                        EditorElements[nodes[cellNode].nodeType]?.component;\n                      const celStyles = stylesExtractor(\n                        nodes[cellNode]?.node?.style\n                      );\n                      const celAttrs = propertyExtractor(\n                        nodes[cellNode]?.node?.attrs\n                      );\n                      if (Component)\n                        return (\n                          <ElementWrapper id={cellNode}>\n                            <Component\n                              id={cellNode}\n                              node={getNodeById(cellNode)?.node}\n                              style={celStyles}\n                              {...celAttrs}\n                            />\n                          </ElementWrapper>\n                        );\n                    })}\n                  </>\n                );\n              }\n            },\n            center: true,\n            ...colAttrs,\n            style: colStyles,\n          };\n        } else {\n          return {\n            id: colNodeId,\n            name: colAttrs?.label ?? \"\",\n            cell(_: any, rowIndex: any) {\n              if (colAttrs.name === \"ردیف\") return rowIndex + 1;\n              else {\n                return <div style={colStyles}></div>;\n              }\n            },\n            center: true,\n            ...colAttrs,\n          };\n        }\n      })\n      .filter(Boolean) ?? [];\n\n  const rowColumn = {\n    name: props?.rowTitle ?? \"#\",\n    id: \"row\",\n    cell: (_: any, index: number) => <span>{index + 1}</span>,\n    center: true,\n    width: props?.rowWidth ?? null,\n  };\n  const selectColumn = {\n    name: <KdpaCheckBox />,\n    id: \"row33\",\n    cell: () => (\n      <span>\n        <KdpaCheckBox />\n      </span>\n    ),\n    center: true,\n    width: props?.selectWidth ?? null,\n  };\n\n  const systemColumns = [];\n  if (props?.hasRow && props?.hasSelect) {\n    systemColumns.push(rowColumn);\n    if (props?.selectColumnIndex === \"first\") {\n      systemColumns.unshift(selectColumn);\n    } else {\n      systemColumns.push(selectColumn);\n    }\n  } else if (props?.hasSelect) {\n    systemColumns.push(selectColumn);\n  } else if (props?.hasRow) {\n    systemColumns.push(rowColumn);\n  }\n\n  newColumns.unshift(...systemColumns);\n\n  const { darkMode } = useContext(DarkModeContext);\n\n  const paginationOptions = {\n    rowsPerPageText: props?.rowsPerPageText || \"\",\n    totalCountText: props?.totalCountText || \"\",\n  };\n\n  return (\n    <>\n      <DataTable\n        noDataComponent={\n          <div style={{ padding: \"24px\" }}>\n            از بخش تنظیمات ستون‌ها و مقادیر را مشخص کنید\n          </div>\n        }\n        {...props}\n        customStyles={{\n          headCells: {\n            style: {\n              // backgroundColor: props?.headerBgColor,\n              ...(style?.[customStyleKeyGenerator(\"colTitleStyle\")] || {}),\n            },\n          },\n          table: {\n            style: style,\n          },\n        }}\n        theme={darkMode ? \"dark\" : \"light\"}\n        data={[\n          { name: \"علی\", age: \"23\" },\n          { name: \"حسن\", age: \"23\" },\n        ]}\n        paginationComponent={() => {\n          if (props.pagination) {\n            return (\n              <KdpaPaginationGrid\n                {...paginationOptions}\n                page={1}\n                pageSize={10}\n                totalCount={10}\n                pageCount={1}\n              />\n            );\n          } else return <></>;\n        }}\n        columns={newColumns}\n      />\n    </>\n  );\n}\n\nexport default Element;\n",
    "meta": "{\n  elementType: \"DataTable\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {\n    pagination: { type: \"static\", content: false },\n    rowTitle: { type: \"static\", content: \"#\" },\n    noDataText: { type: \"static\", content: \"اطلاعاتی برای نمایش وجود ندارد\" },\n    progressText: { type: \"static\", content: \"در حال دریافت اطلاعات...\" },\n  },\n  selfClosing: true,\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"react-data-table-component\",\n  },\n}"
  },
  {
    "elementType": "DATA_GRID_COLUMN",
    "code": null,
    "meta": "{\n  elementType: \"span\",\n  children: [],\n  parentId: \"\",\n  style: {\n    display: { type: \"static\", content: \"flex\" },\n    flexDirection: { type: \"static\", content: \"row\" },\n    alignItems: { type: \"static\", content: \"center\" },\n  },\n  attrs: {},\n}"
  },
  {
    "elementType": "DATE_PANEL",
    "code": "import { useMemo, useState } from \"react\";\nimport moment from \"jalali-moment\";\n\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  FilledInputProps,\n  InputProps,\n  OutlinedInputProps,\n} from \"@mui/material\";\nimport { DatePicker, DatePickerProps } from \"@mui/x-date-pickers/DatePicker\";\nimport { AdapterDateFns as Gregory } from \"@mui/x-date-pickers/AdapterDateFnsV3\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\nimport { AdapterDateFnsJalali as Jalali } from \"@mui/x-date-pickers/AdapterDateFnsJalali\";\n\nimport { DatePickerToolbar } from \"@mui/x-date-pickers/DatePicker\";\n\nimport { KdpaTypography } from \"../../Typography\";\n\nimport \"./KdpaDatePicker.scss\";\n\nexport type KdpaDatePickerProps<T> = DatePickerProps<T> & {\n  changeLocale?: boolean;\n  required?: boolean;\n  locale?: \"fa\" | \"en\" | \"ar\";\n  variant?: \"standard\" | \"outlined\" | \"filled\";\n  sx?: any;\n  helperText?: string;\n  title?: string;\n  error?: boolean;\n  InputProps?:\n    | Partial<InputProps>\n    | Partial<OutlinedInputProps>\n    | Partial<FilledInputProps>\n    | undefined;\n  minDateValue?: \"TODAY\" | \"CUSTOM\";\n  maxDateValue?: \"TODAY\" | \"CUSTOM\";\n  [x: string]: any;\n};\n\nfunction KdpaDatePicker<T>({\n  changeLocale = false,\n  locale,\n  defaultValue,\n  value,\n  variant = \"outlined\",\n  required,\n  sx = {},\n  minDateValue,\n  maxDateValue,\n  ...props\n}: KdpaDatePickerProps<T>) {\n  const defaultLocale = locale || localStorage.getItem(\"i18nextLng\") || \"fa\";\n\n  const [loc, setLoc] = useState<string>(defaultLocale);\n\n  const adaptor = useMemo(() => {\n    switch (loc) {\n      case \"fa\":\n        return Jalali;\n      case \"en\":\n        return Gregory;\n      case \"ar\":\n        return Gregory;\n      default:\n        return Jalali;\n    }\n  }, [loc]);\n\n  function CustomToolbar(props: any) {\n    return (\n      <Box\n        className={props.className}\n        sx={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <DatePickerToolbar {...props} />\n        <Box\n          sx={{\n            display: \"flex\",\n            width: \"100%\",\n            margin: \"1em 1.5em 0 1.5em\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <KdpaTypography>\n            {loc === \"fa\" ? \"تقویم جلالی\" : \"تقویم میلادی\"}\n          </KdpaTypography>\n          <ButtonGroup variant=\"outlined\" aria-label=\"outlined button group\">\n            <Button\n              disabled={loc === \"en\"}\n              onClick={() => setLoc(\"en\")}\n              sx={{\n                \"&.Mui-disabled\": {\n                  color: \"#fff\",\n                },\n                backgroundColor: loc === \"en\" ? \"primary.light\" : \"unset\",\n              }}\n            >\n              M\n            </Button>\n            <Button\n              disabled={loc === \"fa\"}\n              onClick={() => setLoc(\"fa\")}\n              sx={{\n                \"&.Mui-disabled\": {\n                  color: \"#fff\",\n                },\n                backgroundColor: loc === \"fa\" ? \"primary.light\" : \"unset\",\n              }}\n            >\n              J\n            </Button>\n          </ButtonGroup>\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <LocalizationProvider dateAdapter={adaptor}>\n      <DatePicker\n        slotProps={{\n          textField: {\n            variant,\n            size: \"small\",\n            required,\n            error: props?.error,\n            helperText: props?.error ? undefined : props?.helperText,\n            InputProps: props?.InputProps,\n            title: props?.title,\n            InputLabelProps: props?.InputLabelProps,\n          },\n        }}\n        //@ts-ignore\n        slots={\n          changeLocale && {\n            toolbar: CustomToolbar,\n          }\n        }\n        sx={{ width: \"100%\", ...sx }}\n        {...props}\n        onChange={(value) => {\n          // convert type date to ISO\n          //@ts-ignore\n          const convertValue = moment(value).locale(\"en\").format();\n          //@ts-ignore\n          props?.onChange(\n            convertValue.toString() === \"Invalid date\" ? null : convertValue\n          );\n        }}\n        {...(defaultValue\n          ? //@ts-ignore\n            { defaultValue: new Date(defaultValue || null) }\n          : {})}\n        //@ts-ignore\n        value={value ? new Date(value || null) : null}\n        minDate={\n          minDateValue === \"TODAY\"\n            ? (new Date() as T)\n            : minDateValue === \"CUSTOM\" && props?.minDate\n            ? (new Date(props?.minDate as any) as T)\n            : props?.minDate\n        }\n        maxDate={\n          maxDateValue === \"TODAY\"\n            ? (new Date() as T)\n            : maxDateValue === \"CUSTOM\" && props?.maxDate\n            ? (new Date(props?.maxDate as any) as T)\n            : props?.maxDate\n        }\n      />\n    </LocalizationProvider>\n  );\n}\n\nexport default KdpaDatePicker;\n",
    "meta": "{\n  elementType: \"KdFormField\",\n  children: [],\n  parentId: \"\",\n  style: {\n    width: { type: \"static\", content: \"100%\" },\n  },\n  attrs: {\n    Component: {\n      type: \"import\",\n      content: {\n        id: \"KdpaDatePicker\",\n        type: \"package\",\n        version: \"latest\",\n        path: \"kdpa-components\",\n        meta: {\n          namedImport: true,\n        },\n      },\n    },\n  },\n  selfClosing: true,\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "DIV",
    "code": "import React from \"react\";\nimport Grid, { GridProps } from \"@mui/material/Grid\";\nexport type KdpaGridProps = GridProps;\n\nfunction KdpaGrid({ children, ...props }: KdpaGridProps) {\n  return <Grid {...props}>{children}</Grid>;\n}\n\nexport default KdpaGrid;\n",
    "meta": "{\n  elementType: \"KdpaGrid\",\n  children: [],\n  parentId: \"\",\n  style: {\n    padding: { type: \"static\", content: \"6px\" },\n  },\n  attrs: {},\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "DIVIDER",
    "code": "import { Divider, DividerProps } from \"@mui/material\";\n\nexport type KdpaDividerProps = DividerProps;\n\nexport interface KdpaDividerCustomProps {\n  gridActionsStyle?: boolean;\n}\n\nfunction KdpaDivider({\n  gridActionsStyle = false,\n  ...props\n}: KdpaDividerProps & KdpaDividerCustomProps) {\n  if (gridActionsStyle)\n    return (\n      <Divider\n        orientation=\"vertical\"\n        variant=\"middle\"\n        flexItem\n        sx={{\n          height: \"25px\",\n          alignSelf: \"center\",\n        }}\n        {...props}\n      />\n    );\n  else return <Divider {...props} />;\n}\n\nexport default KdpaDivider;\n",
    "meta": "{\n  elementType: \"KdpaDivider\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {},\n  selfClosing: true,\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "DROP_DOWN_LIST",
    "code": "import React from \"react\";\nimport Autocomplete, { AutocompleteProps } from \"@mui/material/Autocomplete\";\nimport { KdpaInput } from \"../../Input\";\n\nexport type KdpaAutoCompleteProps<T> = AutocompleteProps<\n  T,\n  boolean,\n  boolean,\n  boolean\n> & {\n  label?: string;\n  placeholder?: string;\n  variant?: \"outlined\" | \"filled\" | \"standard\" | undefined;\n  helperText?: string;\n  error?: boolean;\n};\n\nfunction KdpaAutoComplete<T>(props: KdpaAutoCompleteProps<T>) {\n  return (\n    <Autocomplete\n      {...props}\n      options={props.options ?? []}\n      renderInput={\n        props.renderInput\n          ? props.renderInput\n          : (params) => (\n              <KdpaInput\n                {...params}\n                size=\"small\"\n                placeholder={props?.placeholder}\n                variant={props?.variant}\n                label={props.label}\n                helperText={props?.error ? undefined : props?.helperText}\n                error={props?.error}\n              />\n            )\n      }\n    />\n  );\n}\nexport default KdpaAutoComplete;\n",
    "meta": "{\n  elementType: \"KdDropDownField\",\n  children: [],\n  parentId: \"\",\n  style: {\n    width: { type: \"static\", content: \"100%\" },\n  },\n  selfClosing: true,\n  attrs: {\n    variant: { type: \"static\", content: \"outlined\" },\n    multiple: { type: \"static\", content: false },\n    noOptionsText: { type: \"static\", content: \"بدون مقدار\" },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "FILE_BROWSER",
    "code": "import { CSSProperties, useEffect, useState } from \"react\";\nimport { FiUpload } from \"react-icons/fi\";\nimport {\n  KdpaSecondaryButton,\n  KdpaTypography,\n  KdpaUploadedFile,\n  KdpaUploadingFile,\n  KdpaUseFileUploadHook,\n} from \"../../../../components\";\nimport { getFileExtensions } from \"./componentHelper\";\nimport { fetchFilesProperty, urlCreator } from \"../../../utils/sharedUtils\";\n\nexport type TypeAcceptUploader = {\n  image?: string[] | \"ALL\";\n  video?: string[] | \"ALL\";\n  text?: string[] | \"ALL\";\n  compress?: string[] | \"ALL\";\n};\n\nexport interface KdFileUploaderProps {\n  label?: string;\n  placeholder?: string;\n  multiple?: boolean;\n  required?: boolean;\n  defaultValue?: string[] | string;\n  accept?: TypeAcceptUploader;\n  fileSizeLimit?: number;\n  fileCountLimit?: number;\n  onError: (message: string) => void;\n  pathProp: {\n    APIURL?: string;\n    sessionId?: string;\n  };\n  value?: string[] | string;\n  inputStyle?: CSSProperties;\n  style?: CSSProperties;\n  downloadSmallSize?: boolean;\n  [x: string]: any;\n}\n\nfunction KdFileUploader({\n  label,\n  defaultValue,\n  placeholder,\n  multiple = false,\n  accept,\n  fileCountLimit,\n  fileSizeLimit,\n  onError,\n  pathProp,\n  inputStyle,\n  style,\n  required,\n  downloadSmallSize,\n  ...props\n}: KdFileUploaderProps) {\n  const {\n    files: tempFilesUploaded,\n    removeFile,\n    uploadingFiles,\n    handleFileChange,\n    fileExtension,\n    APIURL,\n  } = KdpaUseFileUploadHook({\n    multiple,\n    APIURL: pathProp?.APIURL,\n    sessionId: pathProp?.sessionId,\n    onError: onError,\n    fileSizeLimit: fileSizeLimit,\n    fileCountLimit: fileCountLimit,\n  });\n\n  const [value, setValue] = useState<{ fileName?: string; session: string }[]>(\n    []\n  );\n\n  useEffect(() => {\n    if (props?.value === null && value.length > 0) {\n      value.forEach((item) => removeFile(item.session));\n      setValue([]);\n    }\n  }, [props?.value]);\n  // first render for check default value\n  useEffect(() => {\n    const fetchAndSetFileProperties = async () => {\n      if (defaultValue) {\n        const defaultSessions = Array.isArray(defaultValue)\n          ? [...defaultValue]\n          : [defaultValue];\n        const data = await fetchFilesProperty(\n          APIURL,\n          defaultSessions,\n          pathProp?.sessionId\n        );\n\n        setValue(\n          defaultSessions.map((session) => ({\n            fileName: (data ?? []).find((el: any) => el.guid === session)\n              ?.fileName,\n            session: session,\n          }))\n        );\n      } else {\n        setValue([]);\n      }\n    };\n\n    fetchAndSetFileProperties();\n  }, [defaultValue]);\n\n  // handle uploaded file\n  useEffect(() => {\n    if (tempFilesUploaded) {\n      if (multiple)\n        setValue((old) => [\n          ...old,\n          ...(tempFilesUploaded\n            .filter((file) => !value.find((el) => el.session === file.session))\n            .map((file) => ({\n              fileName: file.fileName,\n              session: file.session,\n            })) ?? []),\n        ]);\n      else if (tempFilesUploaded.length > 0)\n        setValue([\n          {\n            fileName: tempFilesUploaded[0]?.fileName,\n            session: tempFilesUploaded[0]?.session,\n          },\n        ]);\n    }\n  }, [tempFilesUploaded]);\n\n  // all changes in files value should be apply to onChange form and set value form\n  useEffect(() => {\n    if (props.onChange) {\n      if (multiple) props.onChange((value ?? []).map((item) => item.session));\n      else if (value.length > 0)\n        props.onChange(value[value.length - 1]?.session);\n      else props.onChange();\n    }\n  }, [value]);\n\n  const onDelete = (session: string) => {\n    setValue((old) => old.filter((value) => value.session !== session));\n    if (\n      tempFilesUploaded?.find((item) => item.session === session) &&\n      removeFile\n    )\n      removeFile(session);\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"row\",\n        flexWrap: \"wrap\",\n        gap: \"10px\",\n        alignItems: \"center\",\n        width: \"100%\",\n        ...style,\n      }}\n    >\n      <KdpaTypography>\n        {label} {required && \"*\"}\n      </KdpaTypography>\n\n      <label htmlFor={`icon-button-file-${props.name}`}>\n        <KdpaSecondaryButton\n          component=\"span\"\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            gap: \"5px\",\n            ...inputStyle,\n            ...(props?.disabled && { opacity: \"0.5\" }),\n          }}\n        >\n          <FiUpload />\n          {placeholder}\n        </KdpaSecondaryButton>\n      </label>\n      <input\n        style={{ display: \"none\" }}\n        accept={\n          fileExtension && accept\n            ? getFileExtensions(accept, fileExtension)\n            : \"*\"\n        }\n        id={`icon-button-file-${props.name}`}\n        type=\"file\"\n        multiple={multiple}\n        onChange={(e) => {\n          handleFileChange(e, accept);\n        }}\n        disabled={props?.disabled}\n      />\n\n      <input type=\"hidden\" {...props} value={value?.map((el) => el.session)} />\n\n      {value &&\n        value.map((item) => {\n          const url = urlCreator(APIURL, item.session);\n\n          return (\n            <KdpaUploadedFile\n              sessionId={item?.session}\n              smallUrl={url.thumbnail_URL}\n              largeUrl={url.larg_URL}\n              fileName={item?.fileName}\n              onDelete={props.disabled ? undefined : onDelete}\n              downloadSmallSize={downloadSmallSize}\n              modal={true}\n              extention={item.fileName?.split(\".\").pop()}\n            />\n          );\n        })}\n      {uploadingFiles &&\n        (multiple || value.length === 0) &&\n        uploadingFiles.map((item) => {\n          return <KdpaUploadingFile progress={item.progress} />;\n        })}\n    </div>\n  );\n}\n\nexport default KdFileUploader;\n",
    "meta": "{\n  elementType: \"KdFormField\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {\n    label: { type: \"static\", content: \"file uploader\" },\n    placeholder: { type: \"static\", content: \"فایل\" },\n    accept: {\n      type: \"static\",\n      content: { image: \"ALL\", text: \"ALL\", compress: \"ALL\", video: \"ALL\" },\n    },\n    Component: {\n      type: \"import\",\n      content: {\n        id: \"KdFileUploader\",\n        type: \"package\",\n        version: \"latest\",\n        path: \"kdpa-components\",\n        meta: {\n          namedImport: true,\n        },\n      },\n    },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "FILE_VIEWER",
    "code": "import { styled } from \"@mui/system\";\nimport { BsImage } from \"react-icons/bs\";\n\nimport { useEffect, useState } from \"react\";\nimport { KdpaPdfViewer } from \"../../../components\";\nimport { fileExtension } from \"../../utils\";\nimport { Dialog, DialogContent } from \"@mui/material\";\nimport { fetchFilesProperty } from \"../../../designerKit/utils/sharedUtils\";\n\nconst StyledImage = styled(\"img\")();\nconst StyledDiv = styled(\"div\")();\n\nexport interface KdFileViewerProps {\n  src: string;\n  modal?: boolean;\n  extention?: string;\n  basePath?: {\n    basePathStream?: string;\n    basePathThumbnail?: string;\n  };\n  pathProp?: {\n    APIURL: string;\n  };\n  [x: string]: any;\n}\n\nfunction FullScreenDialog({\n  children,\n  open,\n}: {\n  children: React.ReactNode;\n  open: boolean;\n}) {\n  return (\n    <Dialog open={open} fullScreen>\n      <DialogContent sx={{ padding: \"0px\" }}>{children}</DialogContent>\n    </Dialog>\n  );\n}\n\nfunction KdFileViewer({\n  src,\n  modal = false,\n  basePath,\n  pathProp,\n  ...props\n}: KdFileViewerProps) {\n  const [fileInfo, setFileInfo] = useState({\n    fileType: \"\",\n    extention: \"\",\n  });\n  const [openModal, setOpenModal] = useState(false);\n\n  useEffect(() => {\n    const fetchAndSetFileProperties = async () => {\n      if (src && pathProp?.APIURL) {\n        const data = await fetchFilesProperty(pathProp.APIURL, [src]);\n        const fileName = (data ?? []).find(\n          (el: any) => el.guid === src\n        )?.fileName;\n        const extention = fileName && fileName?.split(\".\").pop();\n\n        setFileInfo({\n          extention: extention,\n          fileType:\n            (\n              Object.keys(fileExtension) as Array<keyof typeof fileExtension>\n            ).find((key) => fileExtension[key].includes(extention)) ?? \"\",\n        });\n      }\n    };\n\n    fetchAndSetFileProperties();\n  }, [src]);\n\n  const handleUrlImage = (size: \"small\" | \"large\"): string => {\n    if (size === \"small\") {\n      if (basePath?.basePathThumbnail) return basePath?.basePathThumbnail + src;\n      else return src as string;\n    } else {\n      if (basePath?.basePathStream) return basePath?.basePathStream + src;\n      else return src as string;\n    }\n  };\n\n  if (!src) {\n    return (\n      <StyledDiv sx={{ ...props?.style, ...props?.sx }}>\n        <BsImage style={{ color: \"gray\", height: \"100%\", width: \"100%\" }} />\n      </StyledDiv>\n    );\n  }\n\n  function renderViewer() {\n    if (fileInfo.fileType === \"text\" && fileInfo.extention === \"pdf\") {\n      return (\n        <KdpaPdfViewer\n          handleClose={() => setOpenModal(false)}\n          fileUrl={handleUrlImage(\"large\")}\n        />\n      );\n    }\n  }\n\n  const Component = renderViewer();\n\n  if (modal === true) {\n    return (\n      <>\n        <StyledImage\n          {...props}\n          src={handleUrlImage(\"small\")}\n          onClick={() => Component && setOpenModal(true)}\n        />\n        {Component && (\n          <FullScreenDialog open={openModal}>{Component}</FullScreenDialog>\n        )}\n      </>\n    );\n  } else if (Component) {\n    if (Component) return <StyledDiv {...props}>{Component}</StyledDiv>;\n  } else <StyledImage {...props} src={handleUrlImage(\"small\")} />;\n}\n\nexport default KdFileViewer;\n",
    "meta": "{\n  elementType: \"KdFileViewer\",\n  children: [],\n  parentId: \"\",\n  style: {\n    height: { type: \"static\", content: \"70px\" },\n    width: { type: \"static\", content: \"70px\" },\n  },\n  attrs: {\n    modal: { type: \"static\", content: true },\n  },\n  selfClosing: true,\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "FORM_LOADER",
    "code": "import React, { CSSProperties } from \"react\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport { FormProvider, UseFormReturn } from \"react-hook-form\";\n\nimport \"./kdFormContainer.scss\";\n\nexport interface KdFormContainerProps {\n  style?: CSSProperties;\n  sx?: CSSProperties;\n  children: React.ReactNode;\n  loading?: boolean;\n  submitLoading?: boolean;\n  formState: UseFormReturn;\n  defaultValues?: { [x: string]: any };\n  onSubmit?: (data: unknown) => void;\n}\n\nfunction KdFormContainer({\n  style,\n  sx,\n  children,\n  onSubmit,\n  loading = false,\n  submitLoading = false,\n  formState,\n}: KdFormContainerProps) {\n  return (\n    <FormProvider {...formState}>\n      <form\n        className=\"kdpa-form-container\"\n        onSubmit={(event: React.FormEvent<HTMLFormElement>) => {\n          if (event) {\n            if (typeof event.preventDefault === \"function\") {\n              event.preventDefault();\n            }\n            if (typeof event.stopPropagation === \"function\") {\n              event.stopPropagation();\n            }\n          }\n\n          return formState?.handleSubmit(async (values: any) => {\n            onSubmit?.(values);\n          })(event);\n        }}\n        style={{ ...sx, ...style }}\n      >\n        {loading ? <CircularProgress /> : children}\n        {submitLoading && (\n          <div className=\"kdpa-form-container__loading\">\n            <CircularProgress />\n          </div>\n        )}\n      </form>\n    </FormProvider>\n  );\n}\n\nexport default React.memo(KdFormContainer);\n",
    "meta": "{\n  elementType: \"KdFormContainer\",\n  children: [],\n  parentId: \"\",\n  style: {\n    backgroundColor: { type: \"static\", content: \"white\" },\n  },\n  attrs: {\n    errorMode: { type: \"static\", content: \"onSubmit\" },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "GRID_ADD_EDIT_PANEL",
    "code": "import { memo } from \"react\";\n\nimport { KdpaTypography, KdFormContainer } from \"../../../components\";\n\nimport KdPanelWrapper from \"./KdPanelWrapper\";\n\nexport interface KdGridPanelProps {\n  isOpen: boolean;\n  children: React.ReactNode;\n  onClose: () => void;\n  label: string;\n  loading: boolean;\n  panelType: string;\n  onSubmit: (data: any) => void;\n  [x: string]: any;\n}\n\nfunction KdGridPanel({\n  isOpen = false,\n  children,\n  onClose,\n  label,\n  loading = false,\n  onSubmit,\n  ...props\n}: KdGridPanelProps) {\n  return (\n    <KdPanelWrapper\n      isOpen={!!isOpen}\n      onClose={onClose}\n      label={label}\n      {...props}\n    >\n      <KdFormContainer\n        onSubmit={onSubmit}\n        loading={loading}\n        formState={props.formState}\n        {...props}\n      >\n        <div>\n          <header style={{ padding: \"12px\", borderBottom: \"1px solid #eee\" }}>\n            <KdpaTypography variant=\"h6\" fontSize={\"16px\"}>\n              {label}\n            </KdpaTypography>\n          </header>\n\n          {children}\n        </div>\n      </KdFormContainer>\n    </KdPanelWrapper>\n  );\n}\n\nexport default memo(KdGridPanel);\n",
    "meta": "{\n  elementType: \"div\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {},\n}"
  },
  {
    "elementType": "GRID_ADD_PANEL",
    "code": "import { memo } from \"react\";\n\nimport { KdpaTypography, KdFormContainer } from \"../../../components\";\n\nimport KdPanelWrapper from \"./KdPanelWrapper\";\n\nexport interface KdGridPanelProps {\n  isOpen: boolean;\n  children: React.ReactNode;\n  onClose: () => void;\n  label: string;\n  loading: boolean;\n  panelType: string;\n  onSubmit: (data: any) => void;\n  [x: string]: any;\n}\n\nfunction KdGridPanel({\n  isOpen = false,\n  children,\n  onClose,\n  label,\n  loading = false,\n  onSubmit,\n  ...props\n}: KdGridPanelProps) {\n  return (\n    <KdPanelWrapper\n      isOpen={!!isOpen}\n      onClose={onClose}\n      label={label}\n      {...props}\n    >\n      <KdFormContainer\n        onSubmit={onSubmit}\n        loading={loading}\n        formState={props.formState}\n        {...props}\n      >\n        <div>\n          <header style={{ padding: \"12px\", borderBottom: \"1px solid #eee\" }}>\n            <KdpaTypography variant=\"h6\" fontSize={\"16px\"}>\n              {label}\n            </KdpaTypography>\n          </header>\n\n          {children}\n        </div>\n      </KdFormContainer>\n    </KdPanelWrapper>\n  );\n}\n\nexport default memo(KdGridPanel);\n",
    "meta": "{\n  elementType: \"KdGridPanel\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {\n    type: { type: \"static\", content: \"inline\" },\n    // errorMode: { type: \"static\", content: \"onSubmit\" },\n    label: { type: \"static\", content: \"پنل افزودن\" },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "GRID_CONTAINER",
    "code": null,
    "meta": "{\n  elementType: \"div\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {},\n}"
  },
  {
    "elementType": "GRID_CONTAINER_HEADER",
    "code": null,
    "meta": "{\n  elementType: \"KdGridHeader\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {\n    title: { type: \"static\", content: \"header\" },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "GRID_CUSTOM_PANEL",
    "code": "import { memo } from \"react\";\n\nimport { KdpaTypography, KdFormContainer } from \"../../../components\";\n\nimport KdPanelWrapper from \"./KdPanelWrapper\";\n\nexport interface KdGridPanelProps {\n  isOpen: boolean;\n  children: React.ReactNode;\n  onClose: () => void;\n  label: string;\n  loading: boolean;\n  panelType: string;\n  onSubmit: (data: any) => void;\n  [x: string]: any;\n}\n\nfunction KdGridPanel({\n  isOpen = false,\n  children,\n  onClose,\n  label,\n  loading = false,\n  onSubmit,\n  ...props\n}: KdGridPanelProps) {\n  return (\n    <KdPanelWrapper\n      isOpen={!!isOpen}\n      onClose={onClose}\n      label={label}\n      {...props}\n    >\n      <KdFormContainer\n        onSubmit={onSubmit}\n        loading={loading}\n        formState={props.formState}\n        {...props}\n      >\n        <div>\n          <header style={{ padding: \"12px\", borderBottom: \"1px solid #eee\" }}>\n            <KdpaTypography variant=\"h6\" fontSize={\"16px\"}>\n              {label}\n            </KdpaTypography>\n          </header>\n\n          {children}\n        </div>\n      </KdFormContainer>\n    </KdPanelWrapper>\n  );\n}\n\nexport default memo(KdGridPanel);\n",
    "meta": "{\n  elementType: \"KdGridPanel\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {},\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "GRID_EDIT_PANEL",
    "code": "import { memo } from \"react\";\n\nimport { KdpaTypography, KdFormContainer } from \"../../../components\";\n\nimport KdPanelWrapper from \"./KdPanelWrapper\";\n\nexport interface KdGridPanelProps {\n  isOpen: boolean;\n  children: React.ReactNode;\n  onClose: () => void;\n  label: string;\n  loading: boolean;\n  panelType: string;\n  onSubmit: (data: any) => void;\n  [x: string]: any;\n}\n\nfunction KdGridPanel({\n  isOpen = false,\n  children,\n  onClose,\n  label,\n  loading = false,\n  onSubmit,\n  ...props\n}: KdGridPanelProps) {\n  return (\n    <KdPanelWrapper\n      isOpen={!!isOpen}\n      onClose={onClose}\n      label={label}\n      {...props}\n    >\n      <KdFormContainer\n        onSubmit={onSubmit}\n        loading={loading}\n        formState={props.formState}\n        {...props}\n      >\n        <div>\n          <header style={{ padding: \"12px\", borderBottom: \"1px solid #eee\" }}>\n            <KdpaTypography variant=\"h6\" fontSize={\"16px\"}>\n              {label}\n            </KdpaTypography>\n          </header>\n\n          {children}\n        </div>\n      </KdFormContainer>\n    </KdPanelWrapper>\n  );\n}\n\nexport default memo(KdGridPanel);\n",
    "meta": "{\n  elementType: \"KdGridPanel\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {\n    type: { type: \"static\", content: \"inline\" },\n    errorMode: { type: \"static\", content: \"onSubmit\" },\n    label: { type: \"static\", content: \"پنل ویرایش\" },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "GRID_SEARCH_PANEL",
    "code": "import { memo } from \"react\";\n\nimport { KdpaTypography, KdFormContainer } from \"../../../components\";\n\nimport KdPanelWrapper from \"./KdPanelWrapper\";\n\nexport interface KdGridPanelProps {\n  isOpen: boolean;\n  children: React.ReactNode;\n  onClose: () => void;\n  label: string;\n  loading: boolean;\n  panelType: string;\n  onSubmit: (data: any) => void;\n  [x: string]: any;\n}\n\nfunction KdGridPanel({\n  isOpen = false,\n  children,\n  onClose,\n  label,\n  loading = false,\n  onSubmit,\n  ...props\n}: KdGridPanelProps) {\n  return (\n    <KdPanelWrapper\n      isOpen={!!isOpen}\n      onClose={onClose}\n      label={label}\n      {...props}\n    >\n      <KdFormContainer\n        onSubmit={onSubmit}\n        loading={loading}\n        formState={props.formState}\n        {...props}\n      >\n        <div>\n          <header style={{ padding: \"12px\", borderBottom: \"1px solid #eee\" }}>\n            <KdpaTypography variant=\"h6\" fontSize={\"16px\"}>\n              {label}\n            </KdpaTypography>\n          </header>\n\n          {children}\n        </div>\n      </KdFormContainer>\n    </KdPanelWrapper>\n  );\n}\n\nexport default memo(KdGridPanel);\n",
    "meta": "{\n  elementType: \"KdGridPanel\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {\n    type: { type: \"static\", content: \"inline\" },\n    label: { type: \"static\", content: \"پنل جستجو\" },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "GRID_VIEW_PANEL",
    "code": "import { memo } from \"react\";\n\nimport { KdpaTypography, KdFormContainer } from \"../../../components\";\n\nimport KdPanelWrapper from \"./KdPanelWrapper\";\n\nexport interface KdGridPanelProps {\n  isOpen: boolean;\n  children: React.ReactNode;\n  onClose: () => void;\n  label: string;\n  loading: boolean;\n  panelType: string;\n  onSubmit: (data: any) => void;\n  [x: string]: any;\n}\n\nfunction KdGridPanel({\n  isOpen = false,\n  children,\n  onClose,\n  label,\n  loading = false,\n  onSubmit,\n  ...props\n}: KdGridPanelProps) {\n  return (\n    <KdPanelWrapper\n      isOpen={!!isOpen}\n      onClose={onClose}\n      label={label}\n      {...props}\n    >\n      <KdFormContainer\n        onSubmit={onSubmit}\n        loading={loading}\n        formState={props.formState}\n        {...props}\n      >\n        <div>\n          <header style={{ padding: \"12px\", borderBottom: \"1px solid #eee\" }}>\n            <KdpaTypography variant=\"h6\" fontSize={\"16px\"}>\n              {label}\n            </KdpaTypography>\n          </header>\n\n          {children}\n        </div>\n      </KdFormContainer>\n    </KdPanelWrapper>\n  );\n}\n\nexport default memo(KdGridPanel);\n",
    "meta": "{\n  elementType: \"KdGridPanel\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {\n    type: { type: \"static\", content: \"inline\" },\n    errorMode: { type: \"static\", content: \"onSubmit\" },\n    label: { type: \"static\", content: \"پنل نمایش\" },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "HEADER_FIELD",
    "code": "import React, { ReactElement, useState } from \"react\";\nimport { AiOutlineMinusCircle, AiOutlinePlusCircle } from \"react-icons/ai\";\nimport { KdpaCollapse } from \"../Collapse\";\nimport { KdpaTooltip } from \"../Tooltips\";\nimport { KdpaGrid, KdpaGridProps } from \"../Grid\";\nimport { useTheme } from \"@mui/system\";\nimport { styled } from \"@mui/system\";\n\nconst StyledDiv = styled(\"div\")();\nexport interface KdpaSegmentProps extends KdpaGridProps {\n  children?: ReactElement;\n  label: string;\n  maxLength?: number;\n  expandable?: boolean;\n  defaultOpen?: boolean;\n}\n\nfunction KdpaSegment({\n  children,\n  label = \"\",\n  maxLength = 23,\n  expandable = false,\n  defaultOpen = true,\n  color,\n  ...props\n}: KdpaSegmentProps) {\n  const labelSize = Math.min(maxLength, label.length) * 7;\n  const [isOpened, setIsOpened] = useState(defaultOpen ?? true);\n\n  const theme = useTheme();\n\n  const primaryColor =\n    color || theme.palette?.primary?.main || \"var(--bs-primary,#7367AA)\";\n  const borderColor = color || \"#ebe9f1\";\n\n  const handleToggleSegment = () => {\n    setIsOpened((prev) => !prev);\n  };\n\n  return (\n    <KdpaGrid sx={{ ...props.style, ...props.sx, width: \"100%\" }}>\n      <KdpaGrid\n        xs={12}\n        container\n        sx={{\n          borderStyle: \"solid\",\n          borderWidth: \"1px\",\n          borderColor: borderColor,\n          position: \"relative\",\n          marginLeft: \"0.1rem\",\n          marginRight: \"0.1rem\",\n          borderRadius: \"0.357rem !important\",\n          borderTopWidth: \"0px !important\",\n          padding: \"1rem 0.1rem\",\n          \"::before\": {\n            content: '\"\"',\n            backgroundColor: borderColor,\n            position: \"absolute\",\n            top: 0,\n            right: \"2px\",\n            width: `calc(${labelSize === 0 ? \"100%\" : `90% - ${labelSize}px`})`, // Replace labelSize with the actual value\n            height: \"0.7px\",\n          },\n          \"::after\": {\n            content: '\"\"',\n            backgroundColor: borderColor,\n            position: \"absolute\",\n            top: 0,\n            right: \"2px\",\n            width: \"20px\",\n            height: \"0.7px\",\n          },\n        }}\n      >\n        <span\n          style={{\n            position: \"absolute\",\n            top: \"-10px\",\n            right: \"10px\",\n            fontSize: \"80%\",\n            padding: \"0 13px\",\n            width: `calc(100px + ${labelSize}px)`,\n          }}\n        >\n          <KdpaTooltip title={label}>\n            <span>\n              {label.length > maxLength ? (\n                <>{label.substring(0, maxLength)} ...</>\n              ) : (\n                label\n              )}\n            </span>\n          </KdpaTooltip>\n        </span>\n        {expandable && (\n          <StyledDiv\n            sx={{\n              position: \"absolute\",\n              top: \"-8px\",\n              right: \"20px\",\n              fontSize: \"80%\",\n              padding: \"0 16px\",\n              width: \"20px\",\n              color: primaryColor,\n            }}\n          >\n            {isOpened ? (\n              <AiOutlineMinusCircle size={18} onClick={handleToggleSegment} />\n            ) : (\n              <AiOutlinePlusCircle size={18} onClick={handleToggleSegment} />\n            )}\n          </StyledDiv>\n        )}\n        <KdpaCollapse\n          in={expandable ? isOpened : true}\n          style={{ width: \"100%\" }}\n        >\n          <React.Fragment>{children}</React.Fragment>\n        </KdpaCollapse>\n      </KdpaGrid>\n    </KdpaGrid>\n  );\n}\n\nexport default KdpaSegment;\n",
    "meta": "{\n  elementType: \"KdpaSegment\",\n  children: [],\n  parentId: \"\",\n  style: {\n    padding: { type: \"static\", content: \"10px\" },\n  },\n  attrs: {\n    label: { type: \"static\", content: \"عنوان\" },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "HTML_EDITOR",
    "code": "import { EditorComponent, Remirror, useRemirror } from \"@remirror/react\";\nimport he from \"he\";\nimport Toolbar from \"./components/toolbar/Toolbar\";\nimport { editorExtentions } from \"./extentions\";\nimport { OnChangeHTML } from \"@remirror/react\";\n\nimport \"remirror/styles/all.css\";\nimport \"./KdHtmlEditor.scss\";\nimport FloatingToolbar from \"./components/toolbar/FloatingToolbar\";\nimport { htmlToProsemirrorNode } from \"remirror\";\nimport { CSSProperties } from \"react\";\n\nexport type ToolbarButton =\n  | \"BOLD\"\n  | \"ITALIC\"\n  | \"UNDERLINE\"\n  | \"STRIKETHROUGH\"\n  | \"BULLET_LIST\"\n  | \"ORDERED_LIST\"\n  | \"TASK_LIST\"\n  | \"RIGHT_ALIGN\"\n  | \"CENTER_ALIGN\"\n  | \"LEFT_ALIGN\";\n\nexport interface KdHtmlEditorProps {\n  onChange?: (htmlValueString: string) => void;\n  defaultValue?: string;\n  style?: CSSProperties;\n  toolbar?: ToolbarButton[];\n  [key: string]: unknown;\n}\n\nconst KdHtmlEditor = ({\n  onChange,\n  defaultValue,\n  style,\n  toolbar = [\n    \"BOLD\",\n    \"ITALIC\",\n    \"UNDERLINE\",\n    \"STRIKETHROUGH\",\n    \"BULLET_LIST\",\n    \"ORDERED_LIST\",\n    \"TASK_LIST\",\n    \"RIGHT_ALIGN\",\n    \"CENTER_ALIGN\",\n    \"LEFT_ALIGN\",\n  ],\n  ...props\n}: KdHtmlEditorProps) => {\n  const { manager, state } = useRemirror({\n    extensions: editorExtentions,\n    selection: \"start\",\n  });\n\n  const doc = htmlToProsemirrorNode({\n    content: he.unescape(defaultValue ?? \"\"),\n    schema: state.schema,\n  });\n\n  return (\n    <div style={{ height: \"300px\", ...style }} {...props}>\n      <div className={`remirror-theme kd-editor`}>\n        <Remirror manager={manager} initialContent={doc}>\n          <Toolbar toolbar={toolbar} />\n          <EditorComponent />\n          <FloatingToolbar />\n          <OnChangeHTML\n            onChange={(html: string) => {\n              if (onChange) onChange(he.escape(html));\n            }}\n          />\n        </Remirror>\n      </div>\n    </div>\n  );\n};\n\nexport default KdHtmlEditor;\n",
    "meta": "{\n  elementType: \"KdFormField\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {\n    placeholder: { type: \"static\", content: \"بنویسید...\" },\n    Component: {\n      type: \"import\",\n      content: {\n        id: \"KdHtmlEditor\",\n        type: \"package\",\n        version: \"latest\",\n        path: \"kdpa-components\",\n        meta: {\n          namedImport: true,\n        },\n      },\n    },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "HYPER_LINK",
    "code": null,
    "meta": "{\n    elementType: \"a\",\n    children: [],\n    parentId: \"\",\n    style: {},\n    attrs: {},\n  }"
  },
  {
    "elementType": "ICON",
    "code": null,
    "meta": "{\n  elementType: \"KdStyledComponent\",\n  selfClosing: true,\n  style: {},\n  attrs: {\n    Component: {\n      type: \"import\",\n      content: {\n        id: \"FiPlus\",\n        type: \"package\",\n        version: \"latest\",\n        path: `react-icons/fi`,\n        meta: {\n          namedImport: true,\n        },\n      },\n    },\n    size: { type: \"static\", content: \"40\" },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "ICON_BUTTON",
    "code": "import React, { ReactNode } from \"react\";\nimport IconButton from \"@mui/material/IconButton\";\nimport { KdpaTooltip } from \"../../Tooltips\";\n\nexport interface KdpaIconButtonProps {\n  icon?: ReactNode;\n  tooltipText?: string;\n  disabled?: boolean;\n  onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  children?: ReactNode;\n  [x: string]: any;\n}\n\nfunction KdpaIconButton({\n  icon,\n  tooltipText = \"\",\n  placement = \"top\",\n  ...props\n}: KdpaIconButtonProps) {\n  const { disabled, onClick, children, ...restOfProps } = props;\n\n  const IconButtonContent = (\n    <IconButton disabled={disabled ?? false} onClick={onClick} {...restOfProps}>\n      {children ? children : icon}\n    </IconButton>\n  );\n\n  return tooltipText ? (\n    <KdpaTooltip title={tooltipText} placement={placement}>\n      {IconButtonContent}\n    </KdpaTooltip>\n  ) : (\n    IconButtonContent\n  );\n}\n\nexport default KdpaIconButton;\n",
    "meta": "{\n  elementType: \"KdpaIconButton\",\n  children: [],\n  parentId: \"\",\n  style: {\n    width: { type: \"static\", content: \"50px\" },\n    height: { type: \"static\", content: \"50px\" },\n  },\n  attrs: {},\n  innerChildren: [\n    {\n      type: \"element\",\n      content: {\n        elementType: \"KdStyledComponent\",\n        selfClosing: true,\n        style: {},\n        attrs: {\n          Component: {\n            type: \"import\",\n            content: {\n              id: \"FiPlus\",\n              type: \"package\",\n              version: \"latest\",\n              path: `react-icons/fi`,\n              meta: {\n                namedImport: true,\n              },\n            },\n          },\n          size: { type: \"static\", content: \"40\" },\n        },\n        dependency: {\n          type: \"package\",\n          version: \"latest\",\n          path: \"kdpa-components\",\n          meta: {\n            namedImport: true,\n          },\n        },\n      },\n    },\n  ],\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "IMAGE_BOX",
    "code": "import React, { useEffect, useState } from \"react\";\nimport { BsImage } from \"react-icons/bs\";\nimport ModalImage, { ModalImageProps } from \"react-modal-image\";\nimport { KdpaMuiBadge } from \"../../../components\";\n\nimport { styled } from \"@mui/system\";\nimport ImageZoom from \"./ImageZoom\";\n\nconst StyledImage = styled(\"img\")();\nconst StyledDiv = styled(\"div\")();\nconst StyledModalImage = styled(ModalImage)();\n\n//@ts-ignore\nexport interface KdImageBoxProps extends Partial<ModalImageProps> {\n  src?: string | string[];\n  basePath?: {\n    basePathStream?: string;\n    basePathThumbnail?: string;\n  };\n  modal?: boolean;\n\n  zoomable?: boolean;\n  quality?: \"LOW\" | \"HIGH\";\n  sx?: any;\n}\n\nconst KdImageBox = ({\n  src,\n  quality = \"LOW\",\n  zoomable,\n  loading = \"lazy\",\n  ...props\n}: KdImageBoxProps) => {\n  const [srcItem, setSrcItem] = useState<string>();\n\n  useEffect(() => {\n    if (src === undefined) setSrcItem(undefined);\n    else {\n      if (Array.isArray(src)) setSrcItem(src[0]);\n      else setSrcItem(src);\n    }\n  }, [src]);\n\n  const BadgeWrapper = (props: any) => {\n    if (Array.isArray(src))\n      return (\n        <KdpaMuiBadge\n          overlap={\"circular\"}\n          badgeContent={src.length}\n          color={\"primary\"}\n          anchorOrigin={{\n            vertical: \"top\",\n            horizontal: \"right\",\n          }}\n        >\n          {props.children}\n        </KdpaMuiBadge>\n      );\n    else return <>{props.children}</>;\n  };\n\n  const handleUrlImage = (size: \"small\" | \"large\"): string => {\n    if (size === \"small\") {\n      if (props.basePath?.basePathThumbnail)\n        return props.basePath?.basePathThumbnail + srcItem;\n      else return srcItem as string;\n    } else {\n      if (props.basePath?.basePathStream)\n        return props.basePath?.basePathStream + srcItem;\n      else return srcItem as string;\n    }\n  };\n\n  return srcItem ? (\n    <BadgeWrapper>\n      {props.modal === true ? (\n        <StyledModalImage\n          {...props}\n          loading={loading}\n          small={handleUrlImage(quality === \"HIGH\" ? \"large\" : \"small\")}\n          medium={handleUrlImage(\"large\")}\n          large={handleUrlImage(\"large\")}\n          hideZoom\n        />\n      ) : zoomable === true ? (\n        <ImageZoom\n          {...props}\n          src={handleUrlImage(quality === \"HIGH\" ? \"large\" : \"small\")}\n        />\n      ) : (\n        <StyledImage\n          {...props}\n          loading={loading}\n          onError={(event) => {\n            //@ts-ignore\n            event.onerror = null;\n            //@ts-ignore\n            if ((event?.target?.src ?? \"\").endsWith(handleUrlImage(\"small\")))\n              return;\n            //@ts-ignore\n            event.target.src = handleUrlImage(\"small\");\n          }}\n          src={handleUrlImage(quality === \"HIGH\" ? \"large\" : \"small\")}\n        />\n      )}\n    </BadgeWrapper>\n  ) : (\n    <StyledDiv sx={{ ...props?.style, ...props?.sx }}>\n      <BsImage style={{ color: \"gray\", height: \"100%\", width: \"100%\" }} />\n    </StyledDiv>\n  );\n};\n\nexport default KdImageBox;\n",
    "meta": "{\n  elementType: \"KdImageBox\",\n  children: [],\n  parentId: \"\",\n  style: {\n    height: { type: \"static\", content: \"70px\" },\n    width: { type: \"static\", content: \"70px\" },\n  },\n  attrs: {\n    modal: { type: \"static\", content: false },\n  },\n  selfClosing: true,\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "LABEL",
    "code": "import React from \"react\";\nimport InputLabel, { InputLabelProps } from \"@mui/material/InputLabel\";\n\nexport type KdpaInputLabelProps = InputLabelProps;\n\nfunction KdpaInputLabel(props: InputLabelProps) {\n  return <InputLabel {...props}>{props.children}</InputLabel>;\n}\n\nexport default KdpaInputLabel;\n",
    "meta": "{\n  elementType: \"KdpaInputLabel\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {\n    children: { type: \"static\", content: \"label\" },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "LANGUAGE_PICKER",
    "code": "import * as Menubar from \"@radix-ui/react-menubar\";\nimport { MenubarProps } from \"@radix-ui/react-menubar\";\nimport { useState } from \"react\";\nimport \"./KdLanguageChange.scss\";\nimport IrSvg from \"../../../assets/images/country/ir.svg\";\nimport UsSvg from \"../../../assets/images/country/us.svg\";\nimport SaSvg from \"../../../assets/images/country/sa.svg\";\n\nexport interface KdLanguageChangeProps extends MenubarProps {\n  onChange?: any;\n  defaultValue?: string;\n}\n\nconst KdLanguageChange = ({ defaultValue, ...props }: KdLanguageChangeProps) => {\n  const [languageValue, setLanguageValue] = useState(defaultValue ?? \"fa\");\n  const langObj: { [key: string]: string } = {\n    fa: \"فارسی\",\n    en: \"English\",\n    ar: \"العربیة\",\n  };\n\n  const countryCodeHandler = (lang: string) => {\n    switch (lang) {\n      case \"fa\":\n        //@ts-ignore\n        return <IrSvg className=\"KdLanguageChange-country-flag\" />;\n        break;\n      case \"ar\":\n        //@ts-ignore\n        return <SaSvg className=\"KdLanguageChange-country-flag\" />;\n        break;\n      case \"en\":\n        //@ts-ignore\n        return <UsSvg className=\"KdLanguageChange-country-flag\" />;\n        break;\n      default:\n        //@ts-ignore\n        return <IrSvg className=\"KdLanguageChange-country-flag\" />;\n        break;\n    }\n  };\n\n  const handleChange = (lang: string) => {\n    setLanguageValue(lang);\n    props?.onChange(lang);\n  };\n  return (\n    <Menubar.Root className=\"KdLanguageChange-MenubarRoot\" dir=\"rtl\" {...props}>\n      <Menubar.Menu>\n        <Menubar.Trigger className=\"KdLanguageChange-MenubarTrigger\">\n          {countryCodeHandler(languageValue)}\n          {langObj[languageValue]}\n        </Menubar.Trigger>\n        <Menubar.Portal>\n          <Menubar.Content\n            align={\"start\"}\n            side={\"bottom\"}\n            sideOffset={10}\n            className=\"KdLanguageChange-MenubarContent\"\n          >\n            {Object.keys(langObj).map((item, index) => {\n              return (\n                <div\n                  key={index}\n                  className=\"KdLanguageChange-MenubarItem\"\n                  onClick={() => handleChange(item)}\n                >\n                  {countryCodeHandler(item)}\n                  {langObj[item]}\n                </div>\n              );\n            })}\n          </Menubar.Content>\n        </Menubar.Portal>\n      </Menubar.Menu>\n    </Menubar.Root>\n  );\n};\n\nexport default KdLanguageChange;\n",
    "meta": "{\n  elementType: \"KdLanguageChange\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {},\n  selfClosing: true, \n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "LAYOUT",
    "code": "import React from \"react\";\nimport Grid, { GridProps } from \"@mui/material/Grid\";\nexport type KdpaGridProps = GridProps;\n\nfunction KdpaGrid({ children, ...props }: KdpaGridProps) {\n  return <Grid {...props}>{children}</Grid>;\n}\n\nexport default KdpaGrid;\n",
    "meta": "{\n  elementType: \"KdpaGrid\",\n  children: [],\n  parentId: \"\",\n  style: {\n    padding: { type: \"static\", content: \"6px\" },\n  },\n  attrs: {\n    container: {\n      type: \"static\",\n      content: true,\n    },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "LAYOUT_CELL",
    "code": "import React from \"react\";\nimport Grid, { GridProps } from \"@mui/material/Grid\";\nexport type KdpaGridProps = GridProps;\n\nfunction KdpaGrid({ children, ...props }: KdpaGridProps) {\n  return <Grid {...props}>{children}</Grid>;\n}\n\nexport default KdpaGrid;\n",
    "meta": "{\n  elementType: \"KdpaGrid\",\n  children: [],\n  parentId: \"\",\n  style: {\n    padding: { type: \"static\", content: \"6px\" },\n  },\n  attrs: {\n    item: {\n      type: \"static\",\n      content: true,\n    },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "LAYOUT_ROW",
    "code": "import React from \"react\";\nimport Grid, { GridProps } from \"@mui/material/Grid\";\nexport type KdpaGridProps = GridProps;\n\nfunction KdpaGrid({ children, ...props }: KdpaGridProps) {\n  return <Grid {...props}>{children}</Grid>;\n}\n\nexport default KdpaGrid;\n",
    "meta": "{\n  elementType: \"KdpaGrid\",\n  children: [],\n  parentId: \"\",\n  style: {\n    padding: { type: \"static\", content: \"6px\" },\n  },\n  attrs: {\n    container: {\n      type: \"static\",\n      content: true,\n    },\n    item: {\n      type: \"static\",\n      content: true,\n    },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "LOADING",
    "code": "import { useMemo } from \"react\";\nimport { useTheme } from \"@mui/material\";\n\nimport * as Components from \"./components\";\nimport { KdStyledComponent } from \"../StyledComponent\";\n\nexport type KdLoadingProps = {\n  type?: keyof typeof Components;\n  color?: string;\n  [key: string]: any;\n};\n\nfunction KdLoading({ type = \"ClipLoader\", color, ...props }: KdLoadingProps) {\n  const theme = useTheme();\n  const Component = useMemo(() => Components[type], [type]);\n\n  const colorProp = color || props?.sx?.color || theme.palette.primary.main;\n\n  // Resolve the color from the theme\n  const resolvedColor = colorProp?.includes(\".\")\n    ? colorProp\n        .split(\".\")\n        .reduce((acc: any, key: any) => acc?.[key], theme.palette)\n    : colorProp;\n\n  return (\n    <KdStyledComponent\n      Component={Component}\n      {...props}\n      //@ts-ignore\n      color={resolvedColor}\n    />\n  );\n}\n\nexport default KdLoading;\n",
    "meta": "{\n  elementType: \"KdLoading\",\n  children: [],\n  parentId: \"\",\n  selfClosing: true,\n  style: {},\n  attrs: {},\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "MENU",
    "code": "import React, { ComponentType } from \"react\";\nimport * as Menubar from \"@radix-ui/react-menubar\";\nimport { MenubarProps } from \"@radix-ui/react-menubar\";\nimport { FaChevronLeft, FaChevronDown } from \"react-icons/fa\";\nimport \"./KdMenubar.scss\";\nimport { BuildMenubarType, useMenubarHelper } from \"./useMenubarHelper\";\n\nexport interface KdMenubarProps extends MenubarProps {\n  data: unknown[];\n  onClick?: (...$args: any[]) => void;\n  orientation?: \"vertical\" | \"horizontal\";\n  getOptionLabel?: ((data: any) => string) | undefined;\n  getOptionValue?: ((data: any) => string) | undefined;\n  getOptionParent?: ((data: any) => string) | undefined;\n  getOptionNavlink?: ((data: any) => string) | undefined;\n  getOptionExternalLink?: ((data: any) => boolean) | undefined;\n  LinkComponent?: ComponentType<any>; // Add LinkComponent prop\n  noDataText?: string;\n}\n\nconst KdMenubar = ({\n  data,\n  onClick,\n  orientation = \"horizontal\",\n  getOptionValue,\n  getOptionLabel,\n  getOptionParent,\n  getOptionNavlink,\n  getOptionExternalLink,\n  noDataText = \"no data\",\n  LinkComponent,\n  ...props\n}: KdMenubarProps) => {\n  const { buildMenubar, renderMenubarToSpecificFieldName } = useMenubarHelper();\n  const MenuData = buildMenubar(\n    renderMenubarToSpecificFieldName({\n      data,\n      getOptionLabel,\n      getOptionValue,\n      getOptionParent,\n      getOptionNavlink,\n      getOptionExternalLink,\n    })\n  );\n\n  const MenubarMenu = ({ data }: { data: BuildMenubarType }) => {\n    return (\n      <Menubar.Menu>\n        <Menubar.Trigger className=\"MenubarTrigger\">\n          {data.label}\n          <div className=\"LeftMainSlot\">\n            <FaChevronDown size={10} />\n          </div>\n        </Menubar.Trigger>\n        <Menubar.Portal>\n          <Menubar.Content\n            className=\"MenubarContent\"\n            align={\"start\"}\n            side={orientation === \"horizontal\" ? \"bottom\" : \"right\"}\n            sideOffset={5}\n          >\n            {(data.children ?? []).map((child: BuildMenubarType) => {\n              if (child.children && child.children.length > 0)\n                return <MenubarSub data={child} />;\n              else return <MenubarItem data={child} />;\n            })}\n          </Menubar.Content>\n        </Menubar.Portal>\n      </Menubar.Menu>\n    );\n  };\n\n  const MenubarItem = ({ data }: { data: BuildMenubarType }) => {\n    // comming soon add Link tag from react router dom\n    const TagName =\n      onClick || !data.navlink\n        ? \"span\"\n        : data.externalLink\n        ? \"a\"\n        : LinkComponent || \"a\";\n    const TagProp = onClick\n      ? {\n          onClick: () => {\n            onClick(data);\n          },\n        }\n      : data.externalLink || !LinkComponent\n      ? { href: data.navlink }\n      : { to: data.navlink }; // use \"to\" prop for LinkComponent\n\n    return (\n      <TagName className=\"MenubarItem MenubarTriggerText\" {...TagProp}>\n        {data.label}\n      </TagName>\n    );\n  };\n\n  const MenubarSub = ({ data }: { data: BuildMenubarType }) => {\n    return (\n      <Menubar.Sub>\n        <Menubar.SubTrigger className=\"MenubarSubTrigger\">\n          <span className=\"MenubarTriggerText\">{data.label}</span>\n          <div className=\"LeftSlot\">\n            <FaChevronLeft size={10} />\n          </div>\n        </Menubar.SubTrigger>\n        <Menubar.Portal>\n          <Menubar.SubContent\n            className=\"MenubarSubContent\"\n            alignOffset={-5}\n            sideOffset={10}\n          >\n            {(data.children ?? []).map((child: any) => {\n              if (child.children && child.children.length > 0)\n                return <MenubarSub data={child} />;\n              else return <MenubarItem data={child} />;\n            })}\n          </Menubar.SubContent>\n        </Menubar.Portal>\n      </Menubar.Sub>\n    );\n  };\n\n  return (\n    <>\n      {MenuData.length > 0 ? (\n        <Menubar.Root\n          {...props}\n          className=\"MenubarRoot\"\n          dir=\"rtl\"\n          style={{\n            flexDirection: orientation === \"horizontal\" ? \"unset\" : \"column\",\n            ...props.style,\n          }}\n        >\n          {MenuData.map((child) => (\n            <MenubarMenu data={child} {...props} />\n          ))}\n        </Menubar.Root>\n      ) : (\n        <div style={{ width: \"100%\", textAlign: \"center\" }}>{noDataText}</div>\n      )}\n    </>\n  );\n};\n\nexport default KdMenubar;\n",
    "meta": "{\n  elementType: \"KdMenubar\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {},\n  selfClosing: true,\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "MODAL",
    "code": "import React from \"react\";\nimport IconButton from \"@mui/material/IconButton\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport Dialog, { DialogProps } from \"@mui/material/Dialog\";\nimport { BsX } from \"react-icons/bs\";\n\nexport interface KdModalProps extends Omit<DialogProps, \"open\"> {\n  title?: string;\n  children: React.ReactNode;\n  onClose: () => void;\n  isOpen: boolean;\n  hasHeader?: boolean;\n  backdropClick?: boolean;\n  [x: string]: any;\n}\n\nfunction KdModal({\n  title,\n  children,\n  onClose,\n  isOpen,\n  fullWidth = true,\n  hasHeader = true,\n  backdropClick = true,\n  ...props\n}: KdModalProps) {\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={(e, reason) => {\n        if (reason === \"backdropClick\" && !backdropClick) {\n          return;\n        }\n        onClose?.();\n      }}\n      fullWidth={fullWidth}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n      {...props}\n      sx={{\n        \"& .MuiDialog-paper\": {\n          padding: \"20px\",\n          ...props?.sx,\n        },\n      }}\n    >\n      {hasHeader && (\n        <DialogTitle\n          id=\"alert-dialog-title\"\n          variant=\"body1\"\n          sx={{\n            display: \"flex\",\n            padding: \"0px !important\",\n            paddingBottom: \"20px !important\",\n            fontSize: \"16px\",\n            fontWeight: 600,\n            paddingLeft: \"16px\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <span>{title}</span>\n\n          <IconButton onClick={onClose}>\n            <BsX />\n          </IconButton>\n        </DialogTitle>\n      )}\n\n      <DialogContent sx={{ padding: \"1px\" }}>{children}</DialogContent>\n    </Dialog>\n  );\n}\n\nexport default KdModal;\n",
    "meta": "{\n  elementType: \"KdModal\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {},\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "MULTI_FILE_BROWSER",
    "code": "import { ChangeEvent, useCallback, useEffect, useState } from \"react\";\nimport { Box, IconButton } from \"@mui/material\";\nimport { useDropzone } from \"react-dropzone\";\nimport { SlCloudUpload } from \"react-icons/sl\";\nimport { KdpaCollapseTransitions } from \"../../../../components/Transitions\";\nimport { TypeAcceptUploader } from \"../KdFileUploader/KdFileUploader\";\nimport { getFileExtensions } from \"./componentHelper\";\nimport {\n  KdpaTypography,\n  KdpaUploadedFile,\n  KdpaUploadingFile,\n  KdpaUseFileUploadHook,\n} from \"../../../../components/index\";\nimport { fetchFilesProperty, urlCreator } from \"../../../utils/sharedUtils\";\n\nexport interface KdAdvanceFileUploaderProps {\n  label?: string;\n  multiple?: boolean;\n  required?: boolean;\n  fileSizeLimit?: number;\n  fileCountLimit?: number;\n  onError: (message: string) => void;\n  pathProp: {\n    APIURL: string;\n    sessionId?: string;\n  };\n  defaultValue?: string[] | string;\n  accept?: TypeAcceptUploader;\n  downloadSmallSize?: boolean;\n  [x: string]: any;\n}\n\nconst KdAdvanceFileUploader = ({\n  label = \"فایل(ها) را در این جعبه رها کنید، یا روی جعبه کلیک کنید\",\n  defaultValue,\n  multiple = false,\n  accept,\n  fileCountLimit = 20,\n  fileSizeLimit,\n  onError,\n  required,\n  pathProp,\n  downloadSmallSize,\n  ...props\n}: KdAdvanceFileUploaderProps) => {\n  const {\n    files: tempFilesUploaded,\n    removeFile,\n    uploadingFiles,\n    handleFileChange,\n    fileExtension,\n    APIURL,\n  } = KdpaUseFileUploadHook({\n    multiple,\n    APIURL: pathProp?.APIURL,\n    sessionId: pathProp?.sessionId,\n    onError: onError,\n    fileSizeLimit: fileSizeLimit,\n    fileCountLimit: fileCountLimit,\n  });\n\n  const [value, setValue] = useState<{ fileName?: string; session: string }[]>(\n    []\n  );\n\n  useEffect(() => {\n    if (props?.value === null && value.length > 0) {\n      value.forEach((item) => removeFile(item.session));\n      setValue([]);\n    }\n  }, [props?.value]);\n  // first render for check default value\n  useEffect(() => {\n    const fetchAndSetFileProperties = async () => {\n      if (defaultValue) {\n        const defaultSessions = Array.isArray(defaultValue)\n          ? [...defaultValue]\n          : [defaultValue];\n        const data = await fetchFilesProperty(\n          APIURL,\n          defaultSessions,\n          pathProp?.sessionId\n        );\n\n        setValue(\n          defaultSessions.map((session) => ({\n            fileName: (data ?? []).find((el: any) => el.guid === session)\n              ?.fileName,\n            session: session,\n          }))\n        );\n      } else {\n        setValue([]);\n      }\n    };\n\n    fetchAndSetFileProperties();\n  }, [defaultValue]);\n\n  // handle uploaded file\n  useEffect(() => {\n    if (tempFilesUploaded) {\n      if (multiple)\n        setValue((old) => [\n          ...old,\n          ...(tempFilesUploaded\n            .filter((file) => !value.find((el) => el.session === file.session))\n            .map((file) => ({\n              fileName: file.fileName,\n              session: file.session,\n            })) ?? []),\n        ]);\n      else if (tempFilesUploaded.length > 0)\n        setValue([\n          {\n            fileName: tempFilesUploaded[0]?.fileName,\n            session: tempFilesUploaded[0]?.session,\n          },\n        ]);\n    }\n  }, [tempFilesUploaded]);\n\n  // all changes in files value should be apply to onChange form and set value form\n  useEffect(() => {\n    if (props.onChange) {\n      if (multiple) props.onChange((value ?? []).map((item) => item.session));\n      else if (value.length > 0)\n        props.onChange(value[value.length - 1].session);\n      else props.onChange();\n    }\n  }, [value]);\n\n  const onDrop = useCallback(\n    (comingFiles: any) => {\n      const syntheticEvent: ChangeEvent<\n        HTMLInputElement & { target: EventTarget & { files: FileList } }\n      > = {\n        //@ts-ignore\n        target: {\n          files: comingFiles,\n        },\n      };\n\n      if (comingFiles.length + value.length > fileCountLimit) {\n        onError?.(`حداکثر ${fileCountLimit} فایل می‌توانید بارگذاری کنید.`);\n        return;\n      } else handleFileChange(syntheticEvent, accept);\n    },\n    [value]\n  );\n\n  const onDelete = (session: string) => {\n    setValue((old) => old.filter((value) => value.session !== session));\n    if (\n      tempFilesUploaded?.find((item) => item.session === session) &&\n      removeFile\n    )\n      removeFile(session);\n  };\n  const {\n    getRootProps,\n    getInputProps,\n    isDragAccept,\n    isDragReject,\n    open,\n    inputRef,\n  } = useDropzone({\n    onDropAccepted: onDrop,\n    accept: accept\n      ? getFileExtensions(accept, fileExtension ?? null)\n      : undefined,\n    maxFiles: 9999,\n    noClick: true,\n    multiple: multiple,\n    disabled: props?.disabled,\n  });\n\n  // this section for ctrl + v (paste)\n  useEffect(() => {\n    if (!inputRef.current) return;\n\n    const handlePasteFile = async (event: ClipboardEvent) => {\n      const files = event.clipboardData?.files;\n\n      if (files && files.length > 0) {\n        // Optionally, you can trigger your input's change event\n        if (inputRef.current) {\n          inputRef.current.files = files;\n          inputRef.current.dispatchEvent(\n            new Event(\"change\", { bubbles: true })\n          );\n        }\n      }\n    };\n\n    document.addEventListener(\"paste\", handlePasteFile);\n\n    return () => {\n      document.removeEventListener(\"paste\", handlePasteFile);\n    };\n  }, [inputRef]);\n\n  return (\n    <Box>\n      <Box\n        component={\"section\"}\n        sx={{\n          // p: 2,\n          mb: 1,\n          border: 2,\n          borderStyle: \"dashed\",\n          borderRadius: 3,\n          borderColor: (theme) => theme.palette.primary.main,\n          transition: \"all 0.3s ease-in-ease-out\",\n          ...(isDragAccept && {\n            borderColor: (theme) => theme.palette.success.main,\n          }),\n          ...(isDragAccept && {\n            bgcolor: (theme) => theme.palette.success.light,\n          }),\n          ...(isDragReject && {\n            borderColor: (theme) => theme.palette.warning.main,\n          }),\n          ...(isDragReject && {\n            bgcolor: (theme) => theme.palette.warning.light,\n          }),\n          ...props.sx,\n        }}\n        {...getRootProps()}\n      >\n        <input\n          {...getInputProps()}\n          {...(props[\"aria-id\"] && { \"aria-id\": props[\"aria-id\"] })}\n        />\n        <Box\n          sx={{\n            p: 2,\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n          }}\n        >\n          <KdpaTypography sx={{ display: \"flex\", justifyContent: \"center\" }}>\n            {label} {required && \"*\"}\n          </KdpaTypography>\n          <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n            <IconButton\n              sx={{\n                color: (theme) => theme.palette.primary.main,\n                ...(isDragAccept && {\n                  color: (theme) => theme.palette.success.main,\n                }),\n                ...(isDragReject && {\n                  color: (theme) => theme.palette.warning.main,\n                }),\n                ...(props?.disabled && { opacity: \"0.5\" }),\n              }}\n              onClick={open}\n            >\n              <SlCloudUpload size={45} />\n            </IconButton>\n          </Box>\n          <KdpaCollapseTransitions\n            in={value?.length !== 0 || uploadingFiles?.length !== 0}\n          >\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                gap: \"10px\",\n                flexWrap: \"wrap\",\n              }}\n            >\n              {value &&\n                value.map((item) => {\n                  const url = urlCreator(APIURL, item.session);\n\n                  return (\n                    <KdpaUploadedFile\n                      sessionId={item.session}\n                      smallUrl={url.thumbnail_URL}\n                      largeUrl={url.larg_URL}\n                      fileName={item.fileName}\n                      onDelete={props.disabled ? undefined : onDelete}\n                      downloadSmallSize={downloadSmallSize}\n                      modal={true}\n                      extention={item.fileName?.split(\".\").pop()}\n                    />\n                  );\n                })}\n              {uploadingFiles &&\n                (multiple || value.length === 0) &&\n                uploadingFiles.map((item) => {\n                  return <KdpaUploadingFile progress={item.progress} />;\n                })}\n            </div>\n          </KdpaCollapseTransitions>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default KdAdvanceFileUploader;\n",
    "meta": "{\n  elementType: \"KdFormField\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {\n    accept: {\n      type: \"static\",\n      content: { image: \"ALL\", text: \"ALL\", compress: \"ALL\", video: \"ALL\" },\n    },\n    Component: {\n      type: \"import\",\n      content: {\n        id: \"KdAdvanceFileUploader\",\n        type: \"package\",\n        version: \"latest\",\n        path: \"kdpa-components\",\n        meta: {\n          namedImport: true,\n        },\n      },\n    },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "PAGINATION",
    "code": "import React from \"react\";\nimport { Pagination, PaginationProps } from \"@mui/material\";\nimport { KdpaSelect, KdpaMenuItem } from \"../Selects\";\nimport \"./kdpaPaginationGrid.scss\";\n\nexport interface KdpaPaginationGridProps extends PaginationProps {\n  onChange?: (page: any, pageSize: number) => void;\n  totalCount?: number;\n  pageCount?: number;\n  pageTotalCount?: { value: string; label: string }[];\n  disabled?: boolean;\n  page?: number;\n  pageSize?: number;\n  rowsPerPageText?: string;\n  totalCountText?: string;\n  showRowPerPage?: boolean;\n  showTotalCount?: boolean;\n}\n\nconst KdpaPaginationGrid: React.FC<KdpaPaginationGridProps> = ({\n  onChange,\n  totalCount = 0,\n  page = 1,\n  pageSize = 10,\n  pageTotalCount = [\n    {\n      value: \"5\",\n      label: \"5\",\n    },\n    {\n      value: \"10\",\n      label: \"10\",\n    },\n    {\n      value: \"15\",\n      label: \"15\",\n    },\n    {\n      value: \"20\",\n      label: \"20\",\n    },\n  ],\n  disabled,\n  showRowPerPage = true,\n  showTotalCount = true,\n  rowsPerPageText,\n  totalCountText,\n  ...props\n}) => {\n  function handleChangeTotalCount(e: React.ChangeEvent<HTMLSelectElement>) {\n    if (onChange) onChange(1, +e.target.value);\n  }\n\n  function handleChangePage(e: any, page: number) {\n    if (onChange) onChange(page, pageSize);\n  }\n\n  return (\n    <div className=\"kdpa-pagination\">\n      <div className=\"kdpa-pagination-content\">\n        {showRowPerPage && (\n          <>\n            <div className=\"paginationInput-lable\">\n              <span className=\"text-muted\">{rowsPerPageText}</span>\n            </div>\n            <div className=\"kdpa-pagination-container\">\n              <KdpaSelect\n                onChange={(e: any) => handleChangeTotalCount(e)}\n                value={pageSize}\n                disabled={disabled}\n              >\n                {pageTotalCount?.length === 0 ? (\n                  <KdpaMenuItem>بدون مقدار</KdpaMenuItem>\n                ) : (\n                  pageTotalCount?.map((item, index) => (\n                    <KdpaMenuItem key={index} value={item?.value}>\n                      {item?.label}\n                    </KdpaMenuItem>\n                  ))\n                )}\n              </KdpaSelect>\n            </div>\n          </>\n        )}\n        {showTotalCount && (\n          <div className=\"paginationInput-lable kdpa-pagination-container-lable\">\n            <span className=\"text-muted kdpa-pagination-container-span\">\n              {totalCountText}\n            </span>\n            <span>{totalCount}</span>\n          </div>\n        )}\n      </div>\n\n      <Pagination\n        variant=\"outlined\"\n        shape=\"rounded\"\n        {...props}\n        page={page}\n        count={Math.ceil(totalCount / pageSize)}\n        onChange={handleChangePage}\n        disabled={disabled}\n        sx={{\n          ...props.sx,\n          \"& .MuiPagination-ul li\": {\n            margin: \"0 3px\",\n            borderRadius: \"20\",\n          },\n          \"& .MuiPagination-ul li :hover\": {\n            borderColor: (theme) =>\n              theme.palette.primary.main || \"var(--bs-primary,#7367F0)\",\n          },\n          \"& .Mui-selected\": {\n            backgroundColor: (theme) =>\n              (theme.palette.primary.main || \"var(--bs-primary,#7367F0)\") +\n              \" !important\",\n            color: \"white\",\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nexport default KdpaPaginationGrid;\n",
    "meta": "{\n  elementType: \"KdpaPaginationGrid\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {\n    variant: {\n      type: \"static\",\n      content: \"outlined\",\n    },\n    shape: {\n      type: \"static\",\n      content: \"rounded\",\n    },\n    showRowPerPage: {\n      type: \"static\",\n      content: true,\n    },\n    rowsPerPageText: {\n      type: \"static\",\n      content: \"تعداد در صفحه\",\n    },\n    showTotalCount: {\n      type: \"static\",\n      content: true,\n    },\n    totalCountText: {\n      type: \"static\",\n      content: \"تعداد کل\",\n    },\n  },\n  selfClosing: true,\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "PIE_CHART",
    "code": "import { GenerateDataChart2D } from \"./KdChart2DHelper\";\nimport KdChart, { KdChartProps } from \"../KdChart/KdChart\";\n\nexport type KdChart2DProps = KdChartProps & {\n  data?: { [key: string]: unknown }[];\n  groupBy?: string;\n  valueBy?: string;\n};\n\nconst KdChart2D = ({\n  data = [],\n  groupBy = \"\",\n  valueBy = \"\",\n  ...props\n}: KdChart2DProps) => {\n  const { series, uniqueCategoryArray } = GenerateDataChart2D(\n    data,\n    groupBy,\n    valueBy\n  );\n  return (\n    <KdChart\n      noDataText={data.length === 0 ? \"بدون داده\" : \"داده های شما سازگار نیست\"}\n      series={series}\n      labels={(uniqueCategoryArray as string[]) ?? []}\n      {...props}\n    />\n  );\n};\n\nexport default KdChart2D;\n",
    "meta": "{\n  elementType: \"KdChart2D\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {\n    type: { type: \"static\", content: \"donut\" },\n  },\n  selfClosing: true,\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: { namedImport: true },\n  },\n}"
  },
  {
    "elementType": "RADIO_LIST",
    "code": "import React, { forwardRef } from \"react\";\nimport { RadioGroup, RadioGroupProps } from \"@mui/material\";\n\nexport type KdpaRadioGroupPorps = RadioGroupProps;\n\nfunction KdpaRadioGroup(props: KdpaRadioGroupPorps) {\n  return <RadioGroup {...props}>{props.children}</RadioGroup>;\n}\n\nexport default KdpaRadioGroup;\n",
    "meta": "{\n  elementType: \"KdFormField\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  selfClosing: true,\n  attrs: {\n    label: { type: \"static\", content: \"label\" },\n    Component: {\n      type: \"functionalElement\",\n      content: {\n        type: \"element\",\n        content: {\n          elementType: \"KdpaRadioGroup\",\n          children: [],\n          parentId: \"\",\n          style: {},\n          attrs: {\n            \"$args[0]\": {\n              type: \"spread\",\n            },\n          },\n          dependency: {\n            type: \"package\",\n            version: \"latest\",\n            path: \"kdpa-components\",\n            meta: {\n              namedImport: true,\n            },\n          },\n        },\n      },\n    },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "STEPER_CONTAINER",
    "code": "import React, { HTMLAttributes, useEffect } from \"react\";\nimport \"./KdStepRoot.scss\";\n\nimport { styled } from \"@mui/system\";\n\nconst StyledDiv = styled(\"div\")();\n\nexport interface KdStepRootProps extends HTMLAttributes<HTMLDivElement> {\n  currentStep: number;\n  setCurrentStep: (value: number) => void;\n  defaultValue?: string | number;\n  children: React.ReactNode[];\n  orientation?: \"vertical\" | \"horizontal\";\n  clickSteps?: boolean;\n  showConnector?: boolean;\n}\n\nfunction KdStepRoot({\n  currentStep,\n  setCurrentStep,\n  defaultValue,\n  children,\n  orientation = \"horizontal\",\n  clickSteps = false,\n  showConnector = true,\n  ...props\n}: KdStepRootProps) {\n  useEffect(() => {\n    if (defaultValue) {\n      if (typeof defaultValue === \"string\")\n        setCurrentStep(parseInt(defaultValue));\n      else setCurrentStep(defaultValue);\n    }\n  }, [defaultValue]);\n  return (\n    <StyledDiv\n      {...props}\n      className={`${props.className} KdStepRoot ${\n        orientation === \"vertical\"\n          ? \"KdStepRoot_vertical\"\n          : \"KdStepRoot_horizontal\"\n      }`}\n    >\n      {children.map((item, index) => {\n        return React.isValidElement(item)\n          ? React.cloneElement(item as React.ReactElement, {\n              orientation,\n              currentStep,\n              setCurrentStep,\n              clickSteps,\n              showConnector,\n              key: index,\n            })\n          : item;\n      })}\n    </StyledDiv>\n  );\n}\n\nexport default KdStepRoot;\n",
    "meta": "{\n  elementType: \"KdStepRoot\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {},\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "STEPER_ELEMENT",
    "code": "import React from \"react\";\nimport Stepper, { StepperProps } from \"@mui/material/Stepper\";\nimport { Step, StepConnector } from \"@mui/material\";\nimport \"./KdStepList.scss\";\n\nexport interface KdStepListProps extends StepperProps {\n  children: React.ReactNode[];\n  currentStep?: number;\n  setCurrentStep?: (value: number) => void;\n  clickSteps?: boolean;\n  showConnector?: boolean;\n}\nfunction KdStepList({\n  children,\n  currentStep,\n  setCurrentStep,\n  orientation = \"horizontal\",\n  clickSteps = true,\n  showConnector = true,\n  ...props\n}: KdStepListProps) {\n  return (\n    <Stepper\n      activeStep={currentStep}\n      orientation={orientation}\n      {...props}\n      connector={\n        <StepConnector\n          sx={{ visibility: showConnector ? \"visible\" : \"hidden\" }}\n        />\n      }\n      sx={{\n        ...props.sx,\n        \".MuiStepConnector-lineVertical\": {\n          height: \"100%\",\n        },\n      }}\n      className={`${props.className} ${\n        orientation === \"vertical\"\n          ? \"KdStepper_vertical\"\n          : \"KdStepper_horizontal\"\n      }`}\n    >\n      {children.map((child, index) => {\n        if (child)\n          return (\n            <Step\n              active={currentStep === index}\n              completed={\n                currentStep !== undefined ? currentStep > index : false\n              }\n            >\n              {React.isValidElement(child)\n                ? React.cloneElement(child as React.ReactElement, {\n                    orientation,\n                    currentStep,\n                    setCurrentStep,\n                    clickSteps,\n                    key: index,\n                  })\n                : child}\n            </Step>\n          );\n      })}\n    </Stepper>\n  );\n}\n\nexport default KdStepList;\n\nimport { HTMLAttributes } from \"react\";\nimport { KdpaPrimaryButton } from \"../../../../components\";\nimport \"./KdStepContent.scss\";\n\nimport { styled } from \"@mui/system\";\n\nconst StyledDiv = styled(\"div\")();\n\nexport interface KdStepContentProps extends HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n  footer?: boolean;\n  backButtonText?: string;\n  nextButtonText?: string;\n  index?: number;\n  currentStep?: number;\n  setCurrentStep?: (value: number) => void;\n  onPrev?: () => void;\n  onNext?: () => void;\n  orientation?: \"vertical\" | \"horizontal\";\n}\n\nfunction KdStepContent({\n  children,\n  footer = false,\n  backButtonText = \"قبلی\",\n  nextButtonText = \"بعدی\",\n  index,\n  currentStep,\n  setCurrentStep,\n  onPrev,\n  onNext,\n  orientation = \"horizontal\",\n  ...props\n}: KdStepContentProps) {\n  const handleNext = () => {\n    if (setCurrentStep && currentStep !== undefined)\n      setCurrentStep(currentStep + 1);\n  };\n\n  const handleBack = () => {\n    if (setCurrentStep && currentStep !== undefined)\n      setCurrentStep(currentStep - 1);\n  };\n\n  if (currentStep === index)\n    return (\n      <StyledDiv\n        className={\n          orientation === \"horizontal\"\n            ? \"KdStepContent_horizontal\"\n            : \"KdStepContent_vertical\"\n        }\n        {...props}\n      >\n        <div>{children}</div>\n        {footer && (\n          <div className=\"KdStepContent_Buttons\">\n            <KdpaPrimaryButton\n              disabled={currentStep === 0}\n              onClick={() => {\n                if (onPrev) onPrev();\n                else handleBack();\n              }}\n            >\n              {backButtonText}\n            </KdpaPrimaryButton>\n            <KdpaPrimaryButton\n              variant=\"contained\"\n              onClick={() => {\n                if (onNext) onNext();\n                else handleNext();\n              }}\n            >\n              {nextButtonText}\n            </KdpaPrimaryButton>\n          </div>\n        )}\n      </StyledDiv>\n    );\n  else return <></>;\n}\n\nexport default KdStepContent;\n\nimport { useTheme } from \"@mui/material\";\nimport StepLabel, { StepLabelProps } from \"@mui/material/StepLabel\";\nimport \"./KdStepTrigger.scss\";\nexport interface KdStepTriggerProps extends StepLabelProps {\n  index: number;\n  currentStep?: number;\n  setCurrentStep?: (value: number) => void;\n  clickSteps?: boolean;\n  icon?: React.ReactNode;\n  completedIcon?: React.ReactNode;\n  activeIcon?: React.ReactNode;\n}\n\nfunction KdStepTrigger({\n  children,\n  index,\n  currentStep = 0,\n  setCurrentStep,\n  clickSteps = true,\n  icon,\n  completedIcon,\n  activeIcon,\n  ...props\n}: KdStepTriggerProps) {\n  const handleStep = (step: number) => {\n    if (setCurrentStep) setCurrentStep(step);\n  };\n\n  const theme = useTheme();\n\n  function getIcon() {\n    if (currentStep === index) {\n      return activeIcon ?? completedIcon ?? icon;\n    } else if (currentStep > index) {\n      return completedIcon ?? icon;\n    } else {\n      return icon;\n    }\n  }\n  return (\n    <StepLabel\n      onClick={() => {\n        if (clickSteps) handleStep(index);\n      }}\n      {...props}\n      icon={getIcon()}\n      className=\"KdStepLabel\"\n      style={\n        {\n          ...props?.style,\n          \"--primary-main\": theme.palette.primary.main,\n        } as React.CSSProperties\n      }\n    >\n      {children}\n    </StepLabel>\n  );\n}\n\nexport default KdStepTrigger;\n",
    "meta": "{\n  elementType: \"KdStepContent\",\n  children: [],\n  parentId: \"\",\n  style: {\n    padding: { type: \"static\", content: \"6px\" },\n  },\n  attrs: {},\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "SWITCH",
    "code": "import React from \"react\";\nimport Switch, { SwitchProps } from \"@mui/material/Switch\";\n\nexport type KdpaSwitchProps = SwitchProps;\n\nconst KdpaSwitch = React.forwardRef<HTMLInputElement, KdpaSwitchProps>(\n  (props, ref) => {\n    return (\n      <Switch\n        color=\"primary\"\n        inputRef={ref}\n        inputProps={{ \"aria-label\": \"primary checkbox\" }}\n        {...props}\n      />\n    );\n  }\n);\nexport default KdpaSwitch;\n",
    "meta": "{\n  elementType: \"KdFormField\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  selfClosing: true,\n  attrs: {\n    defaultChecked: { type: \"static\", content: true },\n    label: { type: \"static\", content: \"label\" },\n    Component: {\n      type: \"functionalElement\",\n      content: {\n        type: \"element\",\n        content: {\n          elementType: \"KdpaFormControlLabel\",\n          children: [],\n          parentId: \"\",\n          style: {},\n          attrs: {\n            control: {\n              type: \"element\",\n              content: {\n                elementType: \"KdpaSwitch\",\n                children: [],\n                parentId: \"\",\n                style: {},\n                attrs: {},\n                selfClosing: true,\n                dependency: {\n                  type: \"package\",\n                  version: \"latest\",\n                  path: \"kdpa-components\",\n                  meta: {\n                    namedImport: true,\n                  },\n                },\n              },\n            },\n            checked: {\n              type: \"codeBlock\",\n              code: \"$args[0]?.value\",\n            },\n            \"$args[0]\": {\n              type: \"spread\",\n            },\n          },\n          selfClosing: true,\n          dependency: {\n            type: \"package\",\n            version: \"latest\",\n            path: \"kdpa-components\",\n            meta: {\n              namedImport: true,\n            },\n          },\n        },\n      },\n    },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "TAB_CONTAINER",
    "code": "import * as Tabs from \"@radix-ui/react-tabs\";\nimport { TabsProps } from \"@radix-ui/react-tabs\";\n\nimport \"./KdTabsRoot.scss\";\n\nimport { styled } from \"@mui/system\";\n\nconst StyledTabRoot = styled(Tabs.Root)();\n\nexport interface KdTabsRootProps extends TabsProps {\n  children?: React.ReactNode;\n}\n\nfunction KdTabsRoot({ children, ...props }: KdTabsRootProps) {\n  return (\n    <StyledTabRoot dir=\"rtl\" className=\"KdTabsRoot\" {...props}>\n      {children}\n    </StyledTabRoot>\n  );\n}\n\nexport default KdTabsRoot;\n",
    "meta": "{\n  elementType: \"KdTabsRoot\",\n  children: [],\n  parentId: \"\",\n  style: {\n    backgroundColor: { type: \"static\", content: \"#ffffff\" },\n  },\n  attrs: {},\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "TAB_ELEMENT",
    "code": "import * as Tabs from \"@radix-ui/react-tabs\";\nimport { TabsListProps } from \"@radix-ui/react-tabs\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport \"react-perfect-scrollbar/dist/css/styles.css\";\nimport \"./KdTabsList.scss\";\n\nimport { styled } from \"@mui/system\";\n\nconst StyledTabList = styled(Tabs.List)();\n\nexport interface KdTabsListProps extends TabsListProps {\n  children?: React.ReactNode;\n}\n\nfunction KdTabsList({ children, ...props }: KdTabsListProps) {\n  return (\n    <PerfectScrollbar>\n      <StyledTabList className=\"KdTabsList\" {...props}>\n        {children}\n      </StyledTabList>\n    </PerfectScrollbar>\n  );\n}\n\nexport default KdTabsList;\n\nimport * as Tabs from \"@radix-ui/react-tabs\";\nimport { TabsContentProps } from \"@radix-ui/react-tabs\";\nimport \"./KdTabsContent.scss\";\n\nimport { styled } from \"@mui/system\";\n\nconst StyledTabContent = styled(Tabs.Content)();\n\nexport interface KdTabsContentProps extends TabsContentProps {\n  children?: React.ReactNode;\n}\nfunction KdTabsContent({ children, ...props }: KdTabsContentProps) {\n  return (\n    <StyledTabContent className=\"KdTabsContent\" {...props}>\n      {children}\n    </StyledTabContent>\n  );\n}\n\nexport default KdTabsContent;\n\nimport * as Tabs from \"@radix-ui/react-tabs\";\nimport { TabsTriggerProps } from \"@radix-ui/react-tabs\";\nimport { styled } from \"@mui/material/styles\";\nimport { useTheme } from \"@mui/material\";\n\nexport interface KdTabsTriggerProps extends TabsTriggerProps {\n  children?: React.ReactNode;\n}\n\nconst StyledTabsTrigger = styled(Tabs.Trigger)<{ activeColor: string }>`\n  font-family: inherit;\n  background-color: inherit;\n  width: 50px;\n  padding: 0 20px;\n  height: 45px;\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 6px;\n  font-size: 15px;\n  line-height: 1;\n  border: none;\n  user-select: none;\n\n  &[data-state=\"active\"] {\n    color: ${(props: any) => props?.activeColor ?? \"#7367aa\"};\n    border-bottom: 3px solid ${(props: any) => props?.activeColor ?? \"#7367aa\"};\n  }\n`;\n\nfunction KdTabsTrigger({ children, ...props }: KdTabsTriggerProps) {\n  const theme = useTheme();\n  const activeColor = theme?.palette?.primary?.main;\n\n  return (\n    <StyledTabsTrigger\n      className=\"KdTabsTrigger\"\n      activeColor={activeColor}\n      {...props}\n    >\n      {children}\n    </StyledTabsTrigger>\n  );\n}\n\nexport default KdTabsTrigger;\n",
    "meta": "{\n  elementType: \"KdTabsContent\",\n  children: [],\n  parentId: \"\",\n  style: {\n    padding: { type: \"static\", content: \"6px\" },\n  },\n  attrs: {},\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "TAG_BOX_INPUT",
    "code": "import { useEffect, useMemo } from \"react\";\nimport { useController, useFormContext } from \"react-hook-form\";\nimport { KdpaTypography, KdpaAutoComplete } from \"../../../../components\";\n\nexport interface KdTagBoxInputProps {\n  name: string;\n  rules?: any;\n  autoComplete?: boolean;\n  // defaultValueKey?: string;\n  defaultValue?: string | number | string[] | number[];\n  onChange?: (e: unknown) => void;\n  split?: string;\n  [x: string]: any;\n}\n\nfunction KdTagBoxInput({\n  name = \"\",\n  rules = {},\n  options,\n  getOptionValue = (option: any) => option.value,\n  defaultValue,\n  split,\n  ...props\n}: KdTagBoxInputProps) {\n  const { control, setValue } = useFormContext();\n\n  const defaultDropDownValue = useMemo(\n    () => (defaultValue ? defaultValue : null),\n    [defaultValue]\n  );\n\n  useEffect(() => {\n    setValue(name, defaultDropDownValue);\n  }, [defaultDropDownValue]);\n\n  const {\n    field,\n    fieldState: { error },\n  } = useController({\n    control,\n    name,\n    rules,\n    shouldUnregister: true,\n    defaultValue: defaultDropDownValue,\n  });\n\n  function handleChange(...args: any[]) {\n    if (split && split?.length > 0) {\n      field.onChange(args[1]?.join(split));\n      props?.onChange?.(args[1]?.join(split));\n    } else {\n      field.onChange(args[1]);\n      props?.onChange?.(args[1]);\n    }\n  }\n\n  return (\n    <>\n      {/* @ts-ignore */}\n      <KdpaAutoComplete\n        {...field}\n        {...props}\n        value={\n          split && split?.length > 0 && field?.value\n            ? field?.value?.split(split)\n            : []\n        }\n        error={!!error}\n        multiple\n        freeSolo\n        options={options?.map((el: any) => getOptionValue(el)) ?? []}\n        onChange={handleChange}\n      />\n\n      {error && error.message && (\n        <KdpaTypography variant=\"caption\" sx={{ color: \"red\" }}>\n          {error.message}\n        </KdpaTypography>\n      )}\n    </>\n  );\n}\n\nexport default KdTagBoxInput;\n",
    "meta": "{\n  elementType: \"KdTagBoxInput\",\n  children: [],\n  parentId: \"\",\n  style: {\n    width: { type: \"static\", content: \"100%\" },\n  },\n  selfClosing: true,\n  attrs: {\n    split: { type: \"static\", content: \"@\" },\n    variant: { type: \"static\", content: \"outlined\" },\n    noOptionsText: { type: \"static\", content: \"بدون مقدار\" },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "TEXT_BOX",
    "code": "import React from \"react\";\nimport TextField, { TextFieldProps } from \"@mui/material/TextField\";\nimport { NumericFormat } from \"react-number-format\";\nimport { CircularProgress } from \"@mui/material\";\n\nconst NumericFormatCustom = React.forwardRef(function NumericFormatCustom(\n  props,\n  ref\n) {\n  const { onChange, onBlur, ...other } = props;\n  return (\n    <NumericFormat\n      thousandSeparator\n      valueIsNumericString\n      {...other}\n      getInputRef={ref}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            value: values.value,\n          },\n        });\n      }}\n      onBlur={(e) => {\n        onBlur({\n          ...e,\n          target: {\n            ...e?.target,\n            value: (e?.target?.value ?? \"\")?.split(\",\").join(\"\"),\n          },\n        });\n      }}\n    />\n  );\n});\nexport type KdpaInputProps = TextFieldProps & {\n  textAlign?: \"left\" | \"right\" | \"center\";\n  dir?: \"ltr\" | \"rtl\";\n  loading?: boolean;\n  readOnly?: boolean;\n};\n\nconst KdpaInput = React.forwardRef<HTMLInputElement, KdpaInputProps>(\n  ({ dir, ...props }, ref) => {\n    return (\n      <TextField\n        sx={{ width: \"100%\" }}\n        inputRef={ref}\n        variant=\"standard\"\n        size=\"small\"\n        {...props}\n        value={props?.value === null ? \"\" : props?.value}\n        helperText={props?.error ? undefined : props?.helperText}\n        InputProps={{\n          ...props.InputProps,\n          readOnly:\n            props?.readOnly !== undefined\n              ? props.readOnly\n              : props.InputProps?.readOnly,\n          endAdornment: (\n            <>\n              {props?.loading ? (\n                <CircularProgress color=\"inherit\" size={20} />\n              ) : null}\n              {props.InputProps?.endAdornment}\n            </>\n          ),\n          inputComponent:\n            props.type === \"price\"\n              ? NumericFormatCustom\n              : props?.InputProps?.inputComponent,\n        }}\n        inputProps={{\n          ...props.inputProps,\n          style: {\n            ...props.inputProps?.style,\n            direction: dir,\n            textAlign: props?.textAlign,\n          },\n        }}\n      />\n    );\n  }\n);\n\nexport default KdpaInput;\n",
    "meta": "{\n  elementType: \"KdFormField\",\n  children: [],\n  parentId: \"\",\n  style: {\n    width: { type: \"static\", content: \"100%\" },\n  },\n  attrs: {\n    variant: { type: \"static\", content: \"outlined\" },\n    label: { type: \"static\", content: \"input1\" },\n    placeholder: { type: \"static\", content: \"placeholder\" },\n    Component: {\n      type: \"import\",\n      content: {\n        id: \"KdpaInput\",\n        type: \"package\",\n        version: \"latest\",\n        path: \"kdpa-components\",\n        meta: {\n          namedImport: true,\n        },\n      },\n    },\n  },\n  selfClosing: true,\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "TEXT_TREE",
    "code": "import { useEffect, useState } from \"react\";\n\nimport { useTheme } from \"@mui/material\";\nimport CheckboxTree, {\n  CheckboxProps,\n  OnCheckNode,\n  OnExpandNode,\n} from \"react-checkbox-tree\";\n\n// mui icons\n\nimport {\n  MdCheckBox,\n  MdKeyboardArrowLeft,\n  MdKeyboardArrowDown,\n  MdCheckBoxOutlineBlank,\n  MdIndeterminateCheckBox,\n} from \"react-icons/md\";\n\n// default styles\nimport \"react-checkbox-tree/lib/react-checkbox-tree.css\";\n\n// override some default styles\nimport \"./KdTreeField.scss\";\nimport { useTreeFieldHelper } from \"./useTreeFieldHelper\";\n\nexport interface KdTreeFieldProps extends Partial<CheckboxProps> {\n  data: unknown[];\n  multiSelect?: boolean;\n  defaultValue?: string[] | string;\n  getOptionLabel?: ((data: any) => string) | undefined;\n  getOptionIcon?: ((data: any) => string) | undefined;\n  getOptionValue?: ((data: any) => string) | undefined;\n  getOptionParent?: ((data: any) => string) | undefined;\n  noDataText?: string;\n  [key: string]: any;\n}\n\nfunction KdTreeField({\n  data,\n  defaultValue = [],\n  onExpand,\n  multiSelect = true,\n  getOptionValue,\n  getOptionIcon,\n  getOptionLabel,\n  getOptionParent,\n  noDataText = \"no data\",\n  ...props\n}: KdTreeFieldProps) {\n  const theme = useTheme();\n  // build data of tree\n  const { buildTree, renderTreeToSpecificFieldName, findAllExpanded } =\n    useTreeFieldHelper();\n  const convertedData = renderTreeToSpecificFieldName({\n    data,\n    getOptionLabel,\n    getOptionIcon,\n    getOptionValue,\n    getOptionParent,\n  });\n  const nodes = buildTree(convertedData);\n\n  const [checkedNodes, setCheckedNodes] = useState<string[]>([]);\n  const [expandedNodes, setExpandedNodes] = useState<string[]>(\n    [nodes?.[0]?.value] ?? []\n  );\n\n  // handle default value\n  useEffect(() => {\n    if (defaultValue) {\n      if (typeof defaultValue === \"string\") {\n        setExpandedNodes(findAllExpanded(convertedData, defaultValue));\n        setCheckedNodes([defaultValue]);\n      } else {\n        const expanded: string[] = [];\n        defaultValue.forEach((value) => {\n          expanded.push(...findAllExpanded(convertedData, value));\n        });\n        setExpandedNodes(expanded);\n        setCheckedNodes([...defaultValue]);\n      }\n    }\n  }, []);\n\n  // apply all changes in parent onChange(use in form)\n  useEffect(() => {\n    if (props?.onChange) {\n      if (multiSelect) props.onChange(checkedNodes);\n      else props.onChange(checkedNodes[0]);\n    }\n  }, [checkedNodes]);\n\n  function onCheckNode(checkedNodeItems: string[], nodeInfo: OnCheckNode) {\n    if (multiSelect) {\n      setCheckedNodes(checkedNodeItems);\n    } else {\n      //@ts-ignore\n      if (nodeInfo.isLeaf) {\n        const isCurrentNodeChecked = !!checkedNodes.find(\n          (node: string) => node === nodeInfo.value\n        );\n        setCheckedNodes(isCurrentNodeChecked ? [] : [nodeInfo.value]);\n      }\n    }\n  }\n\n  function onExpandNode(checkedNodes: string[], nodeInfo: OnExpandNode) {\n    if (onExpand) onExpand(checkedNodes, nodeInfo);\n    setExpandedNodes(checkedNodes);\n  }\n\n  return (\n    <div className=\"KdTreeField\">\n      {nodes?.length > 0 ? (\n        <CheckboxTree\n          {...props}\n          icons={{\n            leaf: <span />,\n            parentOpen: <span />,\n            parentClose: <span />,\n            check: (\n              <MdCheckBox size={24} color={theme?.palette?.primary?.main} />\n            ),\n            expandOpen: <MdKeyboardArrowDown size={24} />,\n            uncheck: <MdCheckBoxOutlineBlank size={24} />,\n            expandClose: <MdKeyboardArrowLeft size={24} />,\n            halfCheck: (\n              <MdIndeterminateCheckBox\n                color={theme?.palette?.primary?.main}\n                size={24}\n              />\n            ),\n          }}\n          nodes={nodes}\n          onCheck={onCheckNode}\n          checked={checkedNodes}\n          expanded={expandedNodes}\n          onExpand={onExpandNode}\n          showNodeIcon={true}\n        />\n      ) : (\n        <div style={{ width: \"100%\", textAlign: \"center\" }}>{noDataText}</div>\n      )}\n    </div>\n  );\n}\n\nexport default KdTreeField;\n",
    "meta": "{\n  elementType: \"KdFormField\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {\n    Component: {\n      type: \"import\",\n      content: {\n        id: \"KdTreeField\",\n        type: \"package\",\n        version: \"latest\",\n        path: \"kdpa-components\",\n        meta: {\n          namedImport: true,\n        },\n      },\n    },\n  },\n  selfClosing: true,\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "TIME_PICKER",
    "code": "import { useMemo } from \"react\";\nimport moment from \"jalali-moment\";\nimport { AdapterDateFnsJalali } from \"@mui/x-date-pickers/AdapterDateFnsJalali\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\nimport {\n  DesktopTimePicker,\n  DesktopTimePickerProps,\n} from \"@mui/x-date-pickers/DesktopTimePicker\";\nimport { AdapterDateFns } from \"@mui/x-date-pickers/AdapterDateFnsV3\";\nimport { renderTimeViewClock } from \"@mui/x-date-pickers/timeViewRenderers\";\n\nexport type KdpaTimePickerProps<T> = DesktopTimePickerProps<T> & {\n  required?: boolean;\n  variant?: \"standard\" | \"outlined\" | \"filled\";\n  helperText?: string;\n  error?: boolean;\n  InputProps?: any;\n  title?: string;\n  locale?: \"fa\" | \"en\" | \"ar\";\n  minTimeValue?: \"NOW\" | \"CUSTOM\";\n  maxTimeValue?: \"NOW\" | \"CUSTOM\";\n};\n\nfunction KdpaTimePicker<T>({\n  locale,\n  error = false,\n  required = false,\n  minTimeValue,\n  maxTimeValue,\n  defaultValue,\n  value,\n  ...props\n}: KdpaTimePickerProps<T>) {\n  const defaultLocale = locale || localStorage.getItem(\"i18nextLng\") || \"fa\";\n\n  const adaptor = useMemo(() => {\n    switch (defaultLocale) {\n      case \"fa\":\n        return AdapterDateFnsJalali;\n      case \"en\":\n        return AdapterDateFns;\n      case \"ar\":\n        return AdapterDateFns;\n      default:\n        return AdapterDateFnsJalali;\n    }\n  }, [defaultLocale]);\n\n  return (\n    <LocalizationProvider dateAdapter={adaptor}>\n      <DesktopTimePicker\n        {...props}\n        slotProps={{\n          actionBar: { actions: [] },\n          textField: {\n            variant: props?.variant,\n            size: \"small\",\n            required: required,\n            error: error,\n            helperText: error ? undefined : props?.helperText,\n            InputProps: props?.InputProps,\n            title: props?.title,\n          },\n        }}\n        sx={{ width: \"100%\", ...props?.sx }}\n        minTime={\n          minTimeValue === \"NOW\"\n            ? (new Date() as T)\n            : minTimeValue === \"CUSTOM\" && props?.minTime\n            ? (new Date(props?.minTime as any) as T)\n            : props?.minTime\n        }\n        maxTime={\n          maxTimeValue === \"NOW\"\n            ? (new Date() as T)\n            : maxTimeValue === \"CUSTOM\" && props?.maxTime\n            ? (new Date(props?.maxTime as any) as T)\n            : props?.maxTime\n        }\n        onChange={(value) => {\n          // convert type date to ISO\n          //@ts-ignore\n          const convertValue = moment(value).locale(\"en\").format();\n          //@ts-ignore\n          props?.onChange(\n            convertValue.toString() === \"Invalid date\" ? null : convertValue\n          );\n        }}\n        {...(defaultValue\n          ? //@ts-ignore\n            { defaultValue: new Date(defaultValue || undefined) }\n          : {})}\n        //@ts-ignore\n        value={value ? new Date(value || null) : undefined}\n        viewRenderers={{\n          hours: renderTimeViewClock,\n          minutes: renderTimeViewClock,\n          seconds: renderTimeViewClock,\n        }}\n      />\n    </LocalizationProvider>\n  );\n}\n\nexport default KdpaTimePicker;\n",
    "meta": "{\n  elementType: \"KdFormField\",\n  children: [],\n  parentId: \"\",\n  style: {\n    width: { type: \"static\", content: \"100%\" },\n  },\n  attrs: {\n    Component: {\n      type: \"import\",\n      content: {\n        id: \"KdpaTimePicker\",\n        type: \"package\",\n        version: \"latest\",\n        path: \"kdpa-components\",\n        meta: {\n          namedImport: true,\n        },\n      },\n    },\n  },\n  selfClosing: true,\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "TOOLTIP",
    "code": "import Zoom from \"@mui/material/Zoom\";\nimport Tooltip, { TooltipProps } from \"@mui/material/Tooltip\";\n\nimport { styled } from \"@mui/system\";\n\nconst StyledSpan = styled(\"span\")();\nexport type KdTooltipProps = Pick<\n  TooltipProps,\n  \"placement\" | \"title\" | \"arrow\" | \"enterDelay\" | \"leaveDelay\"\n> & {\n  [key: string]: any;\n};\n\nconst KdTooltip = ({\n  title = \"\",\n  arrow,\n  children,\n  placement,\n  enterDelay,\n  leaveDelay,\n  ...props\n}: KdTooltipProps) => {\n  return (\n    <Tooltip\n      title={title}\n      TransitionComponent={Zoom}\n      enterDelay={enterDelay}\n      leaveDelay={leaveDelay}\n      arrow={arrow}\n      placement={placement}\n    >\n      <StyledSpan {...props}>{children}</StyledSpan>\n    </Tooltip>\n  );\n};\n\nexport default KdTooltip;\n",
    "meta": "{\n    elementType: \"KdTooltip\",\n    children: [],\n    parentId: \"\",\n    style: {},\n    attrs: {},\n    dependency: {\n      type: \"package\",\n      version: \"latest\",\n      path: \"kdpa-components\",\n      meta: {\n        namedImport: true,\n      },\n    },\n  }"
  },
  {
    "elementType": "TREE_VIEW",
    "code": "import {\n  MdExpandLess as ExpandLessIcon,\n  MdChevronLeft as ChevronLeftIcon,\n} from \"react-icons/md\";\nimport { TreeView, TreeViewProps } from \"@mui/x-tree-view/TreeView\";\nimport { TreeItem } from \"@mui/x-tree-view/TreeItem\";\n\nimport { BuildTreeType, useTreeHelper } from \"./useTreeHelper\";\nimport { ComponentType, CSSProperties } from \"react\";\n\nexport interface KdTreeProps extends TreeViewProps<false> {\n  data: unknown[];\n  onClick?: (...$args: any[]) => void;\n  getOptionLabel?: ((data: any) => string) | undefined;\n  getOptionIcon?: ((data: any) => string) | undefined;\n  getOptionValue?: ((data: any) => string) | undefined;\n  getOptionParent?: ((data: any) => string) | undefined;\n  getOptionNavlink?: ((data: any) => string) | undefined;\n  getOptionExternalLink?: ((data: any) => boolean) | undefined;\n  noDataText?: string;\n  treeItemContentStyle?: CSSProperties;\n  treeItemLabelStyle?: CSSProperties;\n  LinkComponent?: ComponentType<any>; // Add LinkComponent prop\n  hoverTextColor?: string;\n  hoverBackgroundColor?: string;\n  focusedTextColor?: string;\n  focusedBackgroundColor?: string;\n  [key: string]: any;\n}\nfunction KdTree({\n  data,\n  onClick,\n  getOptionValue,\n  getOptionIcon,\n  getOptionLabel,\n  getOptionParent,\n  getOptionNavlink,\n  getOptionExternalLink,\n  noDataText = \"no data\",\n  LinkComponent, // Destructure LinkComponent prop\n  hoverBackgroundColor,\n  hoverTextColor,\n  focusedBackgroundColor,\n  focusedTextColor,\n  ...props\n}: KdTreeProps) {\n  const { buildTree, renderTreeToSpecificFieldName } = useTreeHelper();\n  const nodes = buildTree(\n    renderTreeToSpecificFieldName({\n      data,\n      getOptionLabel,\n      getOptionIcon,\n      getOptionValue,\n      getOptionParent,\n      getOptionNavlink,\n      getOptionExternalLink,\n    })\n  );\n\n  const LeafWrapperTreeItem = ({\n    data,\n    children,\n    isLeaf,\n  }: {\n    data: BuildTreeType;\n    children: any;\n    isLeaf?: boolean;\n  }) => {\n    if (!isLeaf) return <>{children}</>;\n    // comming soon add Link tag from react router dom\n    const TagName =\n      onClick || !data.navlink\n        ? \"span\"\n        : data.externalLink\n        ? \"a\"\n        : LinkComponent || \"a\";\n\n    const TagProp = onClick\n      ? {\n          onClick: () => {\n            onClick(data);\n          },\n        }\n      : data.externalLink || !LinkComponent\n      ? { href: data.navlink }\n      : { to: data.navlink }; // use \"to\" prop for LinkComponent\n\n    return (\n      <TagName\n        {...TagProp}\n        style={{ textDecoration: \"none\", color: \"inherit\" }}\n      >\n        {children}\n      </TagName>\n    );\n  };\n\n  const renderTree = (nodes: BuildTreeType[]) => {\n    return nodes.map((node) => {\n      return (\n        <LeafWrapperTreeItem\n          isLeaf={!(node.children && node.children.length > 0)}\n          data={node}\n        >\n          <TreeItem\n            key={node.value}\n            nodeId={node.value}\n            label={node.label}\n            sx={{\n              \"& .MuiTreeItem-content\": {\n                flexDirection: \"row-reverse\",\n                padding: \"10px 15px\",\n                ...(props.treeItemContentStyle ?? {}),\n              },\n              ...(hoverBackgroundColor && {\n                \"& .MuiTreeItem-content:hover\": {\n                  backgroundColor: hoverBackgroundColor,\n                  color: hoverTextColor,\n                },\n              }),\n              ...(focusedBackgroundColor && {\n                \"& .MuiTreeItem-content.Mui-focused\": {\n                  backgroundColor: focusedBackgroundColor,\n                  color: focusedTextColor,\n                },\n              }),\n              \"& .MuiTreeItem-label\": {\n                display: \"flex\",\n                flexDirection: \"row\",\n                alignItems: \"center\",\n                gap: \"4px\",\n                ...(props.treeItemLabelStyle ?? {}),\n              },\n            }}\n          >\n            {node.children &&\n              node.children.length > 0 &&\n              renderTree(node?.children)}\n          </TreeItem>\n        </LeafWrapperTreeItem>\n      );\n    });\n  };\n\n  return (\n    <>\n      {nodes.length > 0 ? (\n        <TreeView\n          defaultCollapseIcon={<ExpandLessIcon />}\n          defaultExpanded={[]}\n          defaultExpandIcon={<ChevronLeftIcon />}\n          disableSelection\n          {...props}\n        >\n          {renderTree(nodes)}\n        </TreeView>\n      ) : (\n        <div style={{ width: \"100%\", textAlign: \"center\" }}>{noDataText}</div>\n      )}\n    </>\n  );\n}\n\nexport default KdTree;\n",
    "meta": "{\n  elementType: \"KdTree\",\n  children: [],\n  parentId: \"\",\n  style: {},\n  attrs: {},\n  selfClosing: true,\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  },
  {
    "elementType": "TYPOGRAPHY",
    "code": "import { KdpaTypography, KdpaTypographyProps } from \"../../../components\";\nimport { typographyHelper } from \"./typographyHelper\";\n\ntype TypeFormat =\n  | \"DD-MM-YYYY\"\n  | \"MM-DD-YYYY\"\n  | \"YYYY-MM-DD\"\n  | \"DD/MM/YYYY\"\n  | \"YY-MM-DD\";\n\ntype TypeFormatTime =\n  | \"hh:mm:ss\"\n  | \"HH:mm:ss\"\n  | \"hh:mm\"\n  | \"HH:mm\"\n  | \"hh:mm a\"\n  | \"hh:mm:ss a\";\n\ntype TypeFormatDateTime =\n  | \"YYYY/MM/DD HH:mm:ss\"\n  | \"YYYY-MM-DD hh:mm:ss a\"\n  | \"YYYY/MM/DD hh:mm:ss a\";\n\nexport type TypeMeta = {\n  type?:\n    | \"string\"\n    | \"number\"\n    | \"date\"\n    | \"time\"\n    | \"date-time\"\n    | \"boolean\"\n    | \"html\";\n  maxLength?: number;\n  typeNumber?: \"int\" | \"float\" | \"cost\";\n  format?: TypeFormat;\n  formatTime?: TypeFormatTime;\n  formatDateTime?: TypeFormatDateTime;\n  loc?: \"fa\" | \"en\" | \"ar\";\n  ignoreTags?: boolean;\n};\n\nexport type KdTypographyProps = KdpaTypographyProps & TypeMeta;\n\nconst KdTypography = ({ type = \"string\", ...props }: KdTypographyProps) => {\n  const meta: TypeMeta = {\n    type: type,\n    maxLength: props.maxLength,\n    typeNumber: props.typeNumber,\n    format: props.format,\n    formatTime: props.formatTime,\n    formatDateTime: props.formatDateTime,\n    loc: props.loc,\n    ignoreTags: props.ignoreTags ?? true,\n  };\n\n  return (\n    <KdpaTypography {...props}>\n      {typographyHelper(props.children, meta)}\n    </KdpaTypography>\n  );\n};\n\nexport default KdTypography;\n",
    "meta": "{\n  elementType: \"KdTypography\",\n  children: [],\n  parentId: \"\",\n  style: {\n    minHeight: { type: \"static\", content: \"10px\" },\n  },\n  attrs: {\n    variant: { type: \"static\", content: \"body1\" },\n    type: { type: \"static\", content: \"string\" },\n  },\n  dependency: {\n    type: \"package\",\n    version: \"latest\",\n    path: \"kdpa-components\",\n    meta: {\n      namedImport: true,\n    },\n  },\n}"
  }
]
